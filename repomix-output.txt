This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-15T08:47:46.036Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
build.gradle
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
settings.gradle
src/main/java/com/radical/be_radicalcare/BeRadicalCareApplication.java
src/main/java/com/radical/be_radicalcare/Constants/Provider.java
src/main/java/com/radical/be_radicalcare/Constants/RoleType.java
src/main/java/com/radical/be_radicalcare/Controllers/AppointmentController.java
src/main/java/com/radical/be_radicalcare/Controllers/AuthController.java
src/main/java/com/radical/be_radicalcare/Controllers/CartController.java
src/main/java/com/radical/be_radicalcare/Controllers/CategoryController.java
src/main/java/com/radical/be_radicalcare/Controllers/ChatController.java
src/main/java/com/radical/be_radicalcare/Controllers/CloudinaryController.java
src/main/java/com/radical/be_radicalcare/Controllers/CostTableController.java
src/main/java/com/radical/be_radicalcare/Controllers/CustomerController.java
src/main/java/com/radical/be_radicalcare/Controllers/FilterController.java
src/main/java/com/radical/be_radicalcare/Controllers/GpsLocationController.java
src/main/java/com/radical/be_radicalcare/Controllers/MotorServiceController.java
src/main/java/com/radical/be_radicalcare/Controllers/ProductController.java
src/main/java/com/radical/be_radicalcare/Controllers/ResetPasswordController.java
src/main/java/com/radical/be_radicalcare/Controllers/SearchController.java
src/main/java/com/radical/be_radicalcare/Controllers/SupplierController.java
src/main/java/com/radical/be_radicalcare/Controllers/VehicleController.java
src/main/java/com/radical/be_radicalcare/Controllers/WarrantyInfoController.java
src/main/java/com/radical/be_radicalcare/Dto/JwtResponse.java
src/main/java/com/radical/be_radicalcare/Dto/LoginRequest.java
src/main/java/com/radical/be_radicalcare/Dto/RegisterRequest.java
src/main/java/com/radical/be_radicalcare/Dto/VehicleDto.java
src/main/java/com/radical/be_radicalcare/Entities/Appointment.java
src/main/java/com/radical/be_radicalcare/Entities/AppointmentDetail.java
src/main/java/com/radical/be_radicalcare/Entities/Cart.java
src/main/java/com/radical/be_radicalcare/Entities/CartItem.java
src/main/java/com/radical/be_radicalcare/Entities/Category.java
src/main/java/com/radical/be_radicalcare/Entities/Contract.java
src/main/java/com/radical/be_radicalcare/Entities/CostTable.java
src/main/java/com/radical/be_radicalcare/Entities/Customer.java
src/main/java/com/radical/be_radicalcare/Entities/Employee.java
src/main/java/com/radical/be_radicalcare/Entities/GpsLocation.java
src/main/java/com/radical/be_radicalcare/Entities/InstallmentPlan.java
src/main/java/com/radical/be_radicalcare/Entities/Invoice.java
src/main/java/com/radical/be_radicalcare/Entities/InvoiceDetail.java
src/main/java/com/radical/be_radicalcare/Entities/Menu.java
src/main/java/com/radical/be_radicalcare/Entities/Message.java
src/main/java/com/radical/be_radicalcare/Entities/MotorService.java
src/main/java/com/radical/be_radicalcare/Entities/Product.java
src/main/java/com/radical/be_radicalcare/Entities/ProductImage.java
src/main/java/com/radical/be_radicalcare/Entities/Role.java
src/main/java/com/radical/be_radicalcare/Entities/Supplier.java
src/main/java/com/radical/be_radicalcare/Entities/User.java
src/main/java/com/radical/be_radicalcare/Entities/Vehicle.java
src/main/java/com/radical/be_radicalcare/Entities/VehicleImage.java
src/main/java/com/radical/be_radicalcare/Entities/WarrantyHistory.java
src/main/java/com/radical/be_radicalcare/Entities/WarrantyInfo.java
src/main/java/com/radical/be_radicalcare/Repositories/IAppointmentDetailRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IAppointmentRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/ICartItemRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/ICartRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/ICategoryRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/ICostTableRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/ICustomerRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IFilterRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IGpsLocationRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IMessageRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IMotorServicesRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IProductImageRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IProductRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IRoleRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/ISupplierRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IUserRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IVehicleImageRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IVehicleRepository.java
src/main/java/com/radical/be_radicalcare/Repositories/IWarrantyInfoRepository.java
src/main/java/com/radical/be_radicalcare/Services/AppointmentService.java
src/main/java/com/radical/be_radicalcare/Services/CartService.java
src/main/java/com/radical/be_radicalcare/Services/CategoryService.java
src/main/java/com/radical/be_radicalcare/Services/CloudinaryService.java
src/main/java/com/radical/be_radicalcare/Services/CostTableService.java
src/main/java/com/radical/be_radicalcare/Services/CustomerService.java
src/main/java/com/radical/be_radicalcare/Services/EmailService.java
src/main/java/com/radical/be_radicalcare/Services/FilterService.java
src/main/java/com/radical/be_radicalcare/Services/GpsLocationService.java
src/main/java/com/radical/be_radicalcare/Services/JwtTokenProvider.java
src/main/java/com/radical/be_radicalcare/Services/MessageService.java
src/main/java/com/radical/be_radicalcare/Services/MotorServicesService.java
src/main/java/com/radical/be_radicalcare/Services/OAuth2UserService.java
src/main/java/com/radical/be_radicalcare/Services/OAuthService.java
src/main/java/com/radical/be_radicalcare/Services/ProductService.java
src/main/java/com/radical/be_radicalcare/Services/RecentSearchService.java
src/main/java/com/radical/be_radicalcare/Services/SearchService.java
src/main/java/com/radical/be_radicalcare/Services/SupplierService.java
src/main/java/com/radical/be_radicalcare/Services/UserService.java
src/main/java/com/radical/be_radicalcare/Services/VehicleService.java
src/main/java/com/radical/be_radicalcare/Services/WarrantyInfoService.java
src/main/java/com/radical/be_radicalcare/Specifications/MotorServicesSpecification.java
src/main/java/com/radical/be_radicalcare/Specifications/VehicleSpecification.java
src/main/java/com/radical/be_radicalcare/Utils/CorsConfig.java
src/main/java/com/radical/be_radicalcare/Utils/JacksonConfig.java
src/main/java/com/radical/be_radicalcare/Utils/JwtAuthenticationFilter.java
src/main/java/com/radical/be_radicalcare/Utils/RedisConfig.java
src/main/java/com/radical/be_radicalcare/Utils/SecurityConfig.java
src/main/java/com/radical/be_radicalcare/Utils/SpringEmailConfig.java
src/main/java/com/radical/be_radicalcare/Utils/WebSocketConfig.java
src/main/java/com/radical/be_radicalcare/Validator/Annotation/ValidUsername.java
src/main/java/com/radical/be_radicalcare/Validator/ValidUsernameValidator.java
src/main/java/com/radical/be_radicalcare/ViewModels/AppointmentDetailGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/AppointmentGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/AppointmentPostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CartGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CartItemGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CategoryGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CategoryPostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/ChatGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CostTableGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CostTablePostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CustomerGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/CustomerPostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/FilterGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/GpsLocationGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/MotorServiceGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/MotorServicePostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/ProductGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/ProductPostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/SearchServiceGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/SearchVehicleGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/SupplierGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/SupplierPostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/UserGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/UserPutVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/VehicleDtoGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/VehicleGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/VehiclePostVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/WarrantyInfoGetVm.java
src/main/java/com/radical/be_radicalcare/ViewModels/WarrantyInfoPostVm.java
src/main/resources/application.properties
src/main/resources/db/migration/V1__Remove_phone_number_from_customer.sql
src/main/resources/db/migration/V2__Add_description_to_vehicle.sql
src/main/resources/templates/shown_reset_password.html
src/test/java/com/radical/be_radicalcare/BeRadicalCareApplicationTests.java

================================================================
Repository Files
================================================================

================
File: .gitignore
================
HELP.md
.gradle
.env
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

================
File: build.gradle
================
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.radical'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Cloudinary Dependencies
    implementation 'com.cloudinary:cloudinary-http44:1.29.0'
    implementation 'commons-io:commons-io:2.14.0'

    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    // Redis Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.data:spring-data-redis:3.1.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate6:2.15.2'

    // Flyway for database migration
    implementation "org.flywaydb:flyway-mysql"

    // JWT Dependencies
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

tasks.named('test') {
    useJUnitPlatform()
}

================
File: gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle
================
rootProject.name = 'Be_RadicalCare'

================
File: src/main/java/com/radical/be_radicalcare/BeRadicalCareApplication.java
================
package com.radical.be_radicalcare;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BeRadicalCareApplication {

    public static void main(String[] args) {

        SpringApplication.run(BeRadicalCareApplication.class, args);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Constants/Provider.java
================
package com.radical.be_radicalcare.Constants;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum Provider {
    LOCAL("Local"),
    GOOGLE("Google");
    public final String value;

}

================
File: src/main/java/com/radical/be_radicalcare/Constants/RoleType.java
================
package com.radical.be_radicalcare.Constants;

import lombok.AllArgsConstructor;

@AllArgsConstructor
public enum RoleType {
    ADMIN(1),
    USER(2),
    CREATOR(3),
    SUPER_ADMIN(4);
    public final long value;
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/AppointmentController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Appointment;
import com.radical.be_radicalcare.Services.AppointmentService;
import com.radical.be_radicalcare.ViewModels.AppointmentGetVm;
import com.radical.be_radicalcare.ViewModels.AppointmentPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1/appointments")
@RequiredArgsConstructor
public class AppointmentController {

    private final AppointmentService appointmentService;

    @GetMapping
    public ResponseEntity<?> getAllAppointments() {
        // Lấy danh sách Appointment từ service
        List<Appointment> appointments = appointmentService.getAllAppointments();

        // Chuyển đổi từ Appointment sang AppointmentGetVm
        List<AppointmentGetVm> appointmentVms = appointments.stream()
                .map(AppointmentGetVm::fromEntity) // Sử dụng phương thức fromEntity
                .collect(Collectors.toList());

        // Tạo response trả về
        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Appointments retrieved successfully");
        response.put("data", appointmentVms); // Trả về danh sách AppointmentGetVm

        return ResponseEntity.ok(response);
    }


    @GetMapping("/{id}")
    public ResponseEntity<?> getAppointmentById(@PathVariable Long id) {
        Appointment appointment = appointmentService.getAppointmentById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Appointment not found"));

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Appointment retrieved successfully");
        response.put("data", appointment);

        return ResponseEntity.ok(response);
    }

    @PostMapping("/create")
    public ResponseEntity<?> createAppointment(@RequestBody AppointmentPostVm appointmentPostVm) {
        appointmentService.addAppointment(appointmentPostVm);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 201);
        response.put("message", "Appointment created successfully");

        return ResponseEntity.status(201).body(response);
    }

    @GetMapping("/search")
    public ResponseEntity<?> searchAppointments(
            @RequestParam(required = false) Long customerId,
            @RequestParam(required = false) LocalDate dateCreated,
            @RequestParam(required = false) List<Long> serviceIds) {
        List<AppointmentGetVm> appointments = appointmentService.searchAppointments(customerId, dateCreated, serviceIds);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Appointments retrieved successfully");
        response.put("data", appointments);

        return ResponseEntity.ok(response);
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateAppointment(
            @PathVariable Long id,
            @RequestBody AppointmentPostVm appointmentPostVm) {
        appointmentService.updateAppointment(id, appointmentPostVm);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Appointment updated successfully");

        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteAppointment(@PathVariable Long id) {
        appointmentService.deleteAppointment(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Appointment deleted successfully");

        return ResponseEntity.ok(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/AuthController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Dto.JwtResponse;
import com.radical.be_radicalcare.Dto.LoginRequest;
import com.radical.be_radicalcare.Dto.RegisterRequest;
import com.radical.be_radicalcare.Entities.User;
import com.radical.be_radicalcare.Services.CustomerService;
import com.radical.be_radicalcare.Services.JwtTokenProvider;
import com.radical.be_radicalcare.Services.UserService;
import com.radical.be_radicalcare.ViewModels.UserGetVm;
import com.radical.be_radicalcare.ViewModels.UserPutVm;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import com.radical.be_radicalcare.Entities.Customer;

@RestController
@RequestMapping("/api/v1/auth")
@RequiredArgsConstructor
@Slf4j
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final UserService userService;
    private final CustomerService customerService;
    private final JwtTokenProvider jwtTokenProvider;

    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            loginRequest.getUsername(),
                            loginRequest.getPassword()
                    )
            );

            String userId = userService.findByUsername(loginRequest.getUsername())
                    .orElseThrow(() -> new RuntimeException("User not found"))
                    .getId();
            String customerId = customerService.getCustomerByUserId(userId)
                    .map(Customer::getId)
                    .orElse(null);
            SecurityContextHolder.getContext().setAuthentication(authentication);
            String jwt = jwtTokenProvider.generateToken(authentication, userId, customerId);

            return ResponseEntity.ok(new JwtResponse(jwt));
        } catch (BadCredentialsException e) {
            log.error("Invalid credentials for user: {}", loginRequest.getUsername());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body("Invalid username or Password");
        } catch (Exception e) {
            log.error("Error during authentication: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("An error occurred: " + e.getMessage());
        }
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/fetch-user")
    public ResponseEntity<UserGetVm> fetchUser(Authentication authentication) {
        try {
            String username = authentication.getName();

            User user = userService.findByUsername(username)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            UserGetVm userGetVm = UserGetVm.fromEntity(user);

            return ResponseEntity.ok(userGetVm);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(null);
        }
    }

    @PostMapping("/register")
    public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest registerRequest) {
        if (userService.existsByUsername(registerRequest.getUsername())) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body("Username is already taken");
        }

        userService.registerUser(registerRequest);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body("User registered successfully");
    }

    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestParam String email){
        userService.forgotPassWord(email);
        return ResponseEntity.ok("Password reset link sent to your email: " + email);
    }

    @PostMapping("/reset-password")
    public ResponseEntity<?> resetPassword(@RequestParam String token, @RequestParam String newPassword) {
        boolean isTokenValid = userService.isTokenValid(token);
        if (!isTokenValid) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Token không hợp lệ hoặc đã hết hạn.");
        }

        userService.resetPassword(token, newPassword);  // Reset mật khẩu dựa trên token
        return ResponseEntity.ok("Password reset successfully");
    }

    @PutMapping("/update-profile")
    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    public ResponseEntity<?> updateUserAndCustomerProfile(Authentication authentication,
                                                          @RequestBody UserPutVm userPutVm) {
        try {
            String username = authentication.getName();

            // Lấy thông tin User
            User user = userService.findByUsername(username)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            // Cập nhật thông tin User (chỉ cập nhật nếu không null)
            if (userPutVm.fullName() != null) {
                user.setFullName(userPutVm.fullName());
            }
            if (userPutVm.email() != null) {
                user.setEmail(userPutVm.email());
            }
            if (userPutVm.phone() != null) {
                user.setPhone(userPutVm.phone());
            }
            userService.updateUser(user);

            // Lấy thông tin Customer liên kết với User
            Customer customer = customerService.getCustomerByUserId(user.getId())
                    .orElseThrow(() -> new RuntimeException("Customer not found"));

            // Cập nhật thông tin Customer (chỉ cập nhật nếu không null)
            if (userPutVm.doB() != null) {
                customer.setDoB(userPutVm.doB());
            }
            if (userPutVm.address() != null) {
                customer.setAddress(userPutVm.address());
            }
            if (userPutVm.fullName() != null) {
                customer.setFullName(userPutVm.fullName());
            }
            if (userPutVm.phone() != null) {
                customer.setPhoneNumber(userPutVm.phone());
            }
            customerService.updateCustomer(customer);

            return ResponseEntity.ok("User and Customer profile updated successfully");
        } catch (Exception e) {
            log.error("Error updating profile: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("An error occurred: " + e.getMessage());
        }
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/CartController.java
================
// Updated CartController.java
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Cart;
import com.radical.be_radicalcare.Services.CartService;
import com.radical.be_radicalcare.ViewModels.CartGetVm;
import com.radical.be_radicalcare.ViewModels.CartItemGetVm;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
@Slf4j
@RestController
@RequestMapping("/api/v1/cart")
public class CartController {

    @Autowired
    private CartService cartService;

    // Get Transient Cart
    @GetMapping("/temporary/{userId}")
    public ResponseEntity<Map<String, Object>> getCartItems(@PathVariable String userId) {
        // Lấy Cart từ Redis
        Cart cart = cartService.getTemporaryCart(userId);

        if (cart == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of(
                            "message", "Cart not found for userId: " + userId,
                            "status", 404
                    ));
        }

        // Chuyển đổi CartItems sang CartItemGetVm
        List<CartItemGetVm> cartItems = cart.getItems().stream()
                .map(CartItemGetVm::from)
                .toList();

        // Chuẩn bị phản hồi JSON
        Map<String, Object> response = Map.of(
                "data", Map.of(
                        "id", cart.getId(),
                        "userId", cart.getUserId(),
                        "totalCost", cart.getTotalCost(),
                        "items", cartItems
                ),
                "message", "Cart retrieved successfully",
                "status", 200
        );

        return ResponseEntity.ok(response);
    }

    @PostMapping("/temporary/add")
    public ResponseEntity<String> addCartItem(
            @RequestParam String userId,
            @RequestParam String chassisNumber,
            @RequestParam int quantity) {
        cartService.saveTemporaryCart(userId, chassisNumber, quantity);
        return ResponseEntity.ok("Item added to cart successfully");
    }

    @PatchMapping("/temporary/update")
    public ResponseEntity<String> updateCartItemQuantity(@RequestBody Map<String, Object> payload) {
        String userId = (String) payload.get("userId");
        String cartItemId = (String) payload.get("cartItemId");
        int newQuantity = (int) payload.get("newQuantity");

        cartService.updateCartItemQuantity(userId, cartItemId, newQuantity);
        return ResponseEntity.ok("CartItem quantity updated successfully");
    }

    @PostMapping("/temporary/cleanup/{userId}")
    public ResponseEntity<Map<String, Object>> cleanUpTemporaryCart(@PathVariable String userId) {
        cartService.cleanUpCart(userId);

        return ResponseEntity.ok(
                Map.of(
                        "message", "Temporary cart cleaned up successfully for userId: " + userId,
                        "status", 200
                )
        );
    }

    @DeleteMapping("/temporary/{userId}/item/{cartItemId}")
    public ResponseEntity<Map<String, Object>> removeCartItem(
            @PathVariable String userId,
            @PathVariable String cartItemId) {
        cartService.removeCartItem(userId, cartItemId);

        return ResponseEntity.ok(
                Map.of(
                        "message", "Item removed successfully from cart",
                        "status", 200
                )
        );
    }

    // Save Persistent Cart (from Transient Cart)
//    @PostMapping("/persistent/{userId}")
//    public ResponseEntity<String> savePersistentCart(@PathVariable String userId) {
//        cartService.savePersistentCart(userId);
//        return ResponseEntity.ok("Cart saved to database successfully");
//    }

    // Get Persistent Cart
//    @GetMapping("/persistent/{userId}")
//    public ResponseEntity<CartGetVm> getPersistentCart(@PathVariable String userId) {
//        Cart cart = cartService.getPersistentCart(userId);
//
//        // Chuyển đổi CartItems sang CartItemGetVm
//        List<CartItemGetVm> cartItems = cart.getItems().stream()
//                .map(CartItemGetVm::from)
//                .collect(Collectors.toList());
//
//        // Tạo CartGetVm từ Cart và danh sách CartItemGetVm
//        return ResponseEntity.ok(CartGetVm.fromEntity(cart, cartItems));
//    }


    // Remove Vehicle from Transient Cart
//    @DeleteMapping("/temporary/{userId}/vehicle/{chassisNumber}")
//    public ResponseEntity<String> removeVehicleFromTemporaryCart(@PathVariable String userId, @PathVariable String chassisNumber) {
//        cartService.removeVehicleFromTemporaryCart(userId, chassisNumber);
//        return ResponseEntity.ok("Vehicle removed from temporary cart successfully");
//    }
//
//    // Remove Vehicle from Persistent Cart
//    @DeleteMapping("/persistent/{userId}/vehicle/{chassisNumber}")
//    public ResponseEntity<String> removeVehicleFromPersistentCart(@PathVariable String userId, @PathVariable String chassisNumber) {
//        cartService.removeVehicleFromPersistentCart(userId, chassisNumber);
//        return ResponseEntity.ok("Vehicle removed from persistent cart successfully");
//    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/CategoryController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Category;
import com.radical.be_radicalcare.Services.CategoryService;
import com.radical.be_radicalcare.ViewModels.CategoryGetVm;
import com.radical.be_radicalcare.ViewModels.CategoryPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
public class CategoryController {
    private final CategoryService categoryService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/category")
    public ResponseEntity<?> getAllCategories() {
        List<CategoryGetVm> categories = categoryService.getAllCategories()
                .stream()
                .map(CategoryGetVm::from)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Categories retrieved successfully");
        response.put("data", categories);

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/category/{id}")
    public ResponseEntity<?> getCategoryById(@PathVariable Long id) {
        return categoryService.getCategoryById(id)
                .map(category -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "Category retrieved successfully");
                    response.put("data", CategoryGetVm.from(category));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message", "Category not found");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/category")
    public ResponseEntity<?> createCategory(@RequestBody CategoryPostVm categoryPostVm) {
        categoryService.addCategory(categoryPostVm.toCategory());

        Map<String, Object> response = new HashMap<>();
        response.put("status", 201);
        response.put("message", "Category created successfully");

        return ResponseEntity.status(201).body(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping("/category/{id}")
    public ResponseEntity<?> updateCategory(@PathVariable Long id, @RequestBody CategoryPostVm categoryPostVm) {
        try {
            Category category = categoryPostVm.toCategory();
            category.setId(id);
            categoryService.updateCategory(category);

            Map<String, Object> response = new HashMap<>();
            response.put("status", 200);
            response.put("message", "Category updated successfully");

            return ResponseEntity.status(200).body(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "An error occurred while updating the category");
            response.put("error", e.getMessage());

            return ResponseEntity.status(500).body(response);
        }
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/category/{id}")
    public ResponseEntity<?> deleteCategory(@PathVariable Long id) {
        categoryService.deleteCategoryById(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Category deleted successfully");

        return ResponseEntity.status(200).body(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/ChatController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Message;
import com.radical.be_radicalcare.Services.MessageService;
import com.radical.be_radicalcare.ViewModels.ChatGetVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.util.Map;
import java.util.List;

@RestController
@RequestMapping("/api/v1/chat")
@RequiredArgsConstructor
public class ChatController {

    private final MessageService messageService;

    @PostMapping(value = "/send", consumes = {"multipart/form-data"})
    public ResponseEntity<?> sendMessage(
            @RequestPart(value = "message", required = false) Message message,
            @RequestPart(value = "images", required = false) List<MultipartFile> images) {

        // Xử lý trường hợp không có message và images
        if (message == null && (images == null || images.isEmpty())) {
            return ResponseEntity.noContent().build();
        }

        Message savedMessage = null;

        // Nếu có message, lưu nội dung tin nhắn
        if (message != null) {
            savedMessage = messageService.saveMessage(
                    message.getSenderId(),
                    message.getRecipientId(),
                    message.getContent(),
                    message.getMessageType()
            );
        }

        // Nếu có images, upload ảnh lên Cloudinary và lưu vào DB
        if (images != null && !images.isEmpty()) {
            if (savedMessage == null) {
                // Tạo tin nhắn mặc định nếu chỉ gửi hình ảnh
                savedMessage = messageService.saveMessage(
                        "system",
                        "unknown",
                        "Image sent",
                        "IMAGE"
                );
            }
            List<String> imageUrls = messageService.saveMessageImages(savedMessage, images);
            return ResponseEntity.ok(Map.of(
                    "message", savedMessage,
                    "uploadedImages", imageUrls
            ));
        }

        return ResponseEntity.ok(savedMessage);
    }

    @GetMapping("/history/{senderId}/{recipientId}")
    public ResponseEntity<List<ChatGetVm>> getChatHistory(
            @PathVariable String senderId,
            @PathVariable String recipientId) {

        List<ChatGetVm> chatHistory = messageService.getChatHistory(senderId, recipientId);
        return ResponseEntity.ok(chatHistory);
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/CloudinaryController.java
================
package com.radical.be_radicalcare.Controllers;


import com.radical.be_radicalcare.Services.CloudinaryService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/cloudinary")
@RequiredArgsConstructor
public class CloudinaryController {
    private final CloudinaryService cloudinaryService;

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/upload")
    public ResponseEntity<Map> uploadImage(@RequestParam("file") MultipartFile file) {
        try {
            Map uploadResult = cloudinaryService.upload(file);
            return new ResponseEntity<>(uploadResult, HttpStatus.OK);
        } catch (IOException e) {
            return new ResponseEntity<>(Map.of("error", e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/CostTableController.java
================
package com.radical.be_radicalcare.Controllers;


import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Entities.WarrantyInfo;
import com.radical.be_radicalcare.Services.CostTableService;
import com.radical.be_radicalcare.ViewModels.CostTableGetVm;
import com.radical.be_radicalcare.ViewModels.CostTablePostVm;
import com.radical.be_radicalcare.ViewModels.WarrantyInfoGetVm;
import com.radical.be_radicalcare.ViewModels.WarrantyInfoPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
public class CostTableController {
    private final CostTableService costTableService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/cost-table")
    public ResponseEntity<?> getAllCostTable(){
        List<CostTableGetVm> costTables = costTableService.getAllCostTable()
                .stream()
                .map(CostTableGetVm::from)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "CostTable retrieved successfully");
        response.put("data", costTables);

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/cost-table/{id}")
    public ResponseEntity<?> getCostTableById(@PathVariable Long id){
        return costTableService.getCostTableById(id)
                .map(costTable -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "CostTable retrieved successfully");
                    response.put("data", CostTableGetVm.from(costTable));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message","CostTable not found");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/cost-table")
    public ResponseEntity<?> createCostTable (@RequestBody CostTablePostVm costTablePostVm){
        costTableService.addCostTable(costTablePostVm.toCostTable());

        Map<String, Object> response = new HashMap<>();
        response.put("status", 201);
        response.put("message","CostTable create successfully");

        return ResponseEntity.status(201).body(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping("/cost-table/{id}")
    public ResponseEntity<?> updateCostTable (@PathVariable Long id, @RequestBody CostTablePostVm costTablePostVm) {
        CostTable costTable = costTablePostVm.toCostTable();
        costTable.setCostId(id);
        costTableService.updateCostTable(costTable);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "CostTable updated successfully");

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/cost-table/{id}")
    public ResponseEntity<?> deleteCostTableById(@PathVariable Long id) {
        costTableService.deleteCostTable(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "CostTable deleted successfully");

        return ResponseEntity.ok(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/CustomerController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Customer;
import com.radical.be_radicalcare.Services.CustomerService;
import com.radical.be_radicalcare.Services.JwtTokenProvider;
import com.radical.be_radicalcare.ViewModels.CustomerPostVm;
import com.radical.be_radicalcare.ViewModels.CustomerGetVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/customer")
@RequiredArgsConstructor
public class CustomerController {

    private final CustomerService customerService;
    private final JwtTokenProvider jwtTokenProvider;

    @PreAuthorize("hasAnyAuthority('USER', 'ADMIN')")
    @GetMapping("/profile")
    public ResponseEntity<?> getCustomerProfile(@RequestHeader("Authorization") String authorizationHeader) {
        // Extract userId from JWT token
        String token = authorizationHeader.replace("Bearer ", "");
        String userId = jwtTokenProvider.getUserIdFromJWT(token);

        // Retrieve customer by userId
        return customerService.getCustomerByUserId(userId)
                .map(customer -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "Customer profile retrieved successfully");
                    response.put("data", CustomerGetVm.fromEntity(customer));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message", "Customer profile not found. Please update your profile.");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAnyAuthority('USER', 'ADMIN')")
    @PostMapping("/profile")
    public ResponseEntity<?> updateCustomerProfile(
            @RequestHeader("Authorization") String authorizationHeader,
            @RequestBody CustomerPostVm customerPostVm) {
        String token = authorizationHeader.replace("Bearer ", "");
        String userId = jwtTokenProvider.getUserIdFromJWT(token);

        customerService.saveOrUpdateCustomer(userId, customerPostVm);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Customer profile updated successfully");
        return ResponseEntity.ok(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/FilterController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Services.FilterService;
import com.radical.be_radicalcare.ViewModels.FilterGetVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import java.util.*;

import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1/filter")
@RequiredArgsConstructor
public class FilterController {

    private final FilterService filterService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping
    public ResponseEntity<?> filterVehicles(@RequestParam MultiValueMap<String, String> queryParams) {
        // Lấy danh sách segments, nếu không có thì trả về danh sách rỗng
        List<String> segments = queryParams.getOrDefault("segment", Collections.emptyList());
        // Lấy danh sách colors, nếu không có thì trả về danh sách rỗng
        List<String> colors = queryParams.getOrDefault("color", Collections.emptyList());
        // Lấy giá trị sold, nếu không có thì là null
        Boolean sold = queryParams.containsKey("sold")
                ? Boolean.valueOf(queryParams.getFirst("sold"))
                : null;
        // Lấy danh sách categoryIds, nếu không có thì trả về danh sách rỗng
        List<Integer> categoryIds = queryParams.containsKey("categoryId")
                ? queryParams.get("categoryId").stream()
                .map(Integer::valueOf)
                .collect(Collectors.toList())
                : Collections.emptyList();
        // Lấy giá trị minCost và maxCost nếu có, nếu không thì là null
        Double minCost = queryParams.containsKey("minCost")
                ? Double.valueOf(Objects.requireNonNull(queryParams.getFirst("minCost")))
                : null;
        Double maxCost = queryParams.containsKey("maxCost")
                ? Double.valueOf(Objects.requireNonNull(queryParams.getFirst("maxCost")))
                : null;

        // Debug: In ra các tham số đã lấy
        System.out.println("Segments: " + segments);
        System.out.println("Colors: " + colors);
        System.out.println("Sold: " + sold);
        System.out.println("Category IDs: " + categoryIds);
        System.out.println("Min Cost: " + minCost);
        System.out.println("Max Cost: " + maxCost);

        // Gọi service với các tham số đã lấy được
        List<FilterGetVm> filteredVehicles = filterService.filterVehicles(
                segments, colors, sold, categoryIds, minCost, maxCost);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Vehicles filtered successfully");
        response.put("data", filteredVehicles);
        return ResponseEntity.ok(response);
    }

    // API để lấy các segment duy nhất
    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/segments")
    public ResponseEntity<?> getSegments() {
        Set<String> segments = filterService.getUniqueSegments();
        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("data", segments);
        return ResponseEntity.ok(response);
    }

    // API để lấy các màu sắc duy nhất
    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/colors")
    public ResponseEntity<?> getColors() {
        Set<String> colors = filterService.getUniqueColors();
        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("data", colors);
        return ResponseEntity.ok(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/GpsLocationController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.GpsLocation;
import com.radical.be_radicalcare.Services.GpsLocationService;
import com.radical.be_radicalcare.ViewModels.GpsLocationGetVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/gps")
@RequiredArgsConstructor
public class GpsLocationController {

    private final GpsLocationService gpsLocationService;

    // Lưu vị trí GPS
    @PostMapping
    public ResponseEntity<?> saveGpsLocation(@RequestBody GpsLocation gpsLocation) {
        // Kiểm tra `user`
        if (gpsLocation.getUser() == null || gpsLocation.getUser().getId() == null) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 400);
            response.put("message", "User ID is required");
            return ResponseEntity.badRequest().body(response);
        }

        // Kiểm tra `customer` (nếu được cung cấp)
        if (gpsLocation.getCustomer() != null && gpsLocation.getCustomer().getId() == null) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 400);
            response.put("message", "If provided, Customer ID cannot be null");
            return ResponseEntity.badRequest().body(response);
        }

        try {
            gpsLocationService.saveGpsLocation(gpsLocation);

            Map<String, Object> response = new HashMap<>();
            response.put("status", 201);
            response.put("message", "GPS location saved successfully");
            return ResponseEntity.status(201).body(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "Error saving GPS location");
            response.put("error", e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

    // Lấy vị trí GPS
    @GetMapping("/{userId}")
    public ResponseEntity<?> getGpsLocation(@PathVariable String userId) {
        try {
            GpsLocation gpsLocation = gpsLocationService.getGpsLocationByUserId(userId);

            if (gpsLocation == null) {
                Map<String, Object> response = new HashMap<>();
                response.put("status", 404);
                response.put("message", "GPS location not found");
                return ResponseEntity.status(404).body(response);
            }

            GpsLocationGetVm gpsLocationGetVm = GpsLocationGetVm.from(gpsLocation);

            Map<String, Object> response = new HashMap<>();
            response.put("status", 200);
            response.put("message", "GPS location retrieved successfully");
            response.put("data", gpsLocationGetVm);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "Error retrieving GPS location");
            response.put("error", e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/MotorServiceController.java
================
package com.radical.be_radicalcare.Controllers;


import com.radical.be_radicalcare.Entities.MotorService;
import com.radical.be_radicalcare.Services.MotorServicesService;
import com.radical.be_radicalcare.ViewModels.MotorServiceGetVm;
import com.radical.be_radicalcare.ViewModels.MotorServicePostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.parameters.P;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v1")
public class MotorServiceController {

    private final MotorServicesService motorServicesService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/motor-service")
    public ResponseEntity<?> getAllMotorServices(){
        List<MotorServiceGetVm> motorServices = motorServicesService.getAllMotorServices()
                .stream()
                .map(MotorServiceGetVm::from)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status",200);
        response.put("message","MotorServices retrieved successfully");
        response.put("data",motorServices);

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/motor-service/{id}")
    public ResponseEntity<?> getMotorServiceById (@PathVariable Long id){
        return motorServicesService.getMotorServiceById(id)
                .map(motorService -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status",200);
                    response.put("message","MotorService retrieved successfully");
                    response.put("data", MotorServiceGetVm.from(motorService));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(()->{
                    Map<String, Object> response = new HashMap<>();
                    response.put("status",404);
                    response.put("message","MotorService not found");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/motor-service")
    public ResponseEntity<?> createMotorServiceById(@RequestBody MotorServicePostVm motorServicePostVm){
        motorServicesService.addMotorService(motorServicePostVm.toMotorService());

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message","MotorService created successfully");

        return ResponseEntity.status(201).body(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping("/motor-service/{id}")
    public ResponseEntity<?> updateMotorServiceById (@PathVariable Long id, @RequestBody MotorServicePostVm motorServicePostVm){
        try{
            MotorService motorService = motorServicePostVm.toMotorService();
            motorService.setServiceId(id);
            motorServicesService.updateMotorService(motorService);

            Map<String ,Object> response = new HashMap<>();
            response.put("status", 200);
            response.put("message","MotorService update successfully");

            return ResponseEntity.status(201).body(response);
        }catch (Exception e){
            Map<String, Object> response = new HashMap<>();
            response.put("status",500);
            response.put("message","An error occurred while updating the MotorService");
            response.put("error",e.getMessage());

            return ResponseEntity.status(500).body(response);
        }
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/motor-service/{id}")
    public ResponseEntity<?> deletedMotorServiceById(@PathVariable Long id){
        motorServicesService.deletedMotorServiceById(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status",200);
        response.put("message","MotorService deleted successfully");

        return ResponseEntity.status(200).body(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/ProductController.java
================
package com.radical.be_radicalcare.Controllers;


import com.radical.be_radicalcare.Entities.Product;
import com.radical.be_radicalcare.Services.ProductService;
import com.radical.be_radicalcare.ViewModels.ProductGetVm;
import com.radical.be_radicalcare.ViewModels.ProductPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

import java.util.List;


@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v1")
public class ProductController {
    private final ProductService productService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/product")
    public ResponseEntity<?> getAllProducts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id") String sortBy) {

        Page<Product> productPage = productService.getAllProducts(page, size, sortBy);
        List<ProductGetVm> products = productPage
                .stream()
                .map(ProductGetVm::from)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Products retrieved successfully");
        response.put("data", products);
        response.put("currentPage", productPage.getNumber());
        response.put("totalItems", productPage.getTotalElements());
        response.put("totalPages", productPage.getTotalPages());

        return ResponseEntity.ok(response);
    }
    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/product/{id}")
    public ResponseEntity<?> getProductById(@PathVariable Long id) {
        return productService.getProductById(id)
                .map(product -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "Category retrieved successfully");
                    response.put("data", ProductGetVm.from(product));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message", "Product not found");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping(value = "/product", consumes = "multipart/form-data")
    public ResponseEntity<?> createProduct(@RequestPart("productPostVm") ProductPostVm productPostVm,
                                           @RequestPart("images") List<MultipartFile> images) {
        try {
            productService.addProduct(productPostVm.toProduct(), images);
            Map<String, Object> response = new HashMap<>();
            response.put("status", 201);
            response.put("message", "Product created successfully");

            return ResponseEntity.status(201).body(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "An error occurred while creating the product");
            response.put("error", e.getMessage());

            return ResponseEntity.status(500).body(response);
        }
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping(value = "/product/{id}", consumes = "multipart/form-data")
    public ResponseEntity<?> updateProduct(@PathVariable Long id,
                                           @RequestPart("productPostVm") ProductPostVm productPostVm,
                                           @RequestPart("images") List<MultipartFile> newImages) {
        try {
            productService.updateProduct(id, productPostVm, newImages);
            Map<String, Object> response = new HashMap<>();
            response.put("status", 200);
            response.put("message", "Product updated successfully");
            return ResponseEntity.status(200).body(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "An error occurred while updating the product");
            response.put("error", e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/product/{id}")
    public ResponseEntity<?> deleteProduct(@PathVariable Long id){
        productService.deleteProduct(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Product deleted successfully");

        return ResponseEntity.status(200).body(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/ResetPasswordController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Services.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/api/v1/reset-password")
@RequiredArgsConstructor
@Slf4j
public class ResetPasswordController {

    private final UserService userService;

    // Hiển thị trang reset mật khẩu
    @GetMapping("/shown")
    public String showResetPasswordPage(@RequestParam("token") String token, Model model) {
        boolean isTokenValid = userService.isTokenValid(token);

        if (!isTokenValid) {
            return "error_page"; // Trường hợp token không hợp lệ, chuyển đến trang lỗi
        }
        model.addAttribute("token", token);  // Truyền token vào model để sử dụng trong template
        return "shown_reset_password";  // Trả về tên của template Thymeleaf
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/SearchController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Services.JwtTokenProvider;
import com.radical.be_radicalcare.Services.SearchService;
import com.radical.be_radicalcare.Services.RecentSearchService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v1/search")
public class SearchController {

    private final RecentSearchService recentSearchService; // Service for managing recent searches
    private final JwtTokenProvider jwtTokenProvider;

//    // Lưu tìm kiếm vào lịch sử
//    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
//    @PostMapping("/recent")
//    public ResponseEntity<?> saveSearch(@RequestHeader("Authorization") String authorizationHeader,
//                                        @RequestParam String searchText) {
//        // Trích xuất userId từ token JWT
//        String token = authorizationHeader.replace("Bearer ", "");
//        String userId = jwtTokenProvider.getUserIdFromJWT(token); // Đảm bảo logic này đúng
//
//        // Lưu lịch sử tìm kiếm
//        recentSearchService.saveSearch(userId, searchText);
//
//        Map<String, String> response = new HashMap<>();
//        response.put("status", "success");
//        response.put("message", "Search saved successfully");
//        return ResponseEntity.ok(response);
//    }

    // Lấy danh sách lịch sử tìm kiếm
    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/recent")
    public ResponseEntity<?> getRecentSearches(@RequestHeader("Authorization") String authorizationHeader) {
        String token = authorizationHeader.replace("Bearer ", "");
        String userId = jwtTokenProvider.getUserIdFromJWT(token);

        List<Object> recentSearches = recentSearchService.getRecentSearches(userId);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", recentSearches.isEmpty() ? "No recent searches found" : "Recent searches retrieved successfully");
        response.put("data", recentSearches);
        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @DeleteMapping("/clear/recent")
    public ResponseEntity<?> clearRecentSearches(
            @RequestHeader("Authorization") String authorizationHeader,
            @RequestBody(required = false) Map<String, String> requestBody) {
        String token = authorizationHeader.replace("Bearer ", "");
        String userId = jwtTokenProvider.getUserIdFromJWT(token);

        if (requestBody != null && requestBody.containsKey("searchText")) {
            String searchText = requestBody.get("searchText");
            recentSearchService.deleteSpecificSearch(userId, searchText);
        } else {
            recentSearchService.deleteRecentSearches(userId);
        }

        Map<String, String> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", "Recent searches deleted successfully");
        return ResponseEntity.ok(response);
    }

    // Xóa toàn bộ lịch sử tìm kiếm
    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @DeleteMapping("/delete/recent")
    public ResponseEntity<?> deleteRecentSearches(@RequestHeader("Authorization") String authorizationHeader) {
        // Trích xuất userId từ token JWT
        String token = authorizationHeader.replace("Bearer ", "");
        String userId = jwtTokenProvider.getUserIdFromJWT(token);

        // Xóa lịch sử tìm kiếm của user
        recentSearchService.deleteRecentSearches(userId);

        Map<String, String> response = new HashMap<>();
        response.put("status", "success");
        response.put("message", "Recent searches deleted successfully");
        return ResponseEntity.ok(response);
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/SupplierController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Supplier;
import com.radical.be_radicalcare.Services.SupplierService;
import com.radical.be_radicalcare.ViewModels.SupplierGetVm;
import com.radical.be_radicalcare.ViewModels.SupplierPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin("*")
@RequiredArgsConstructor
public class SupplierController {
    private final SupplierService supplierService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/supplier")
    public ResponseEntity<?> getAllSuppliers() {
        List<SupplierGetVm> suppliers = supplierService.getAllSuppliers()
                .stream()
                .map(SupplierGetVm::from)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Suppliers retrieved successfully");
        response.put("data", suppliers);

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/supplier/{id}")
    public ResponseEntity<?> getSupplierById(@PathVariable Long id) {
        return supplierService.getSupplierById(id)
                .map(supplier -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "Supplier retrieved successfully");
                    response.put("data", SupplierGetVm.from(supplier));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message", "Supplier not found");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/supplier")
    public ResponseEntity<?> createSupplier(@RequestBody SupplierPostVm supplierPostVm) {
        Supplier supplier = supplierPostVm.toSupplier();
        supplierService.addSupplier(supplier);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 201);
        response.put("message", "Supplier created successfully");

        return ResponseEntity.status(201).body(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping("/supplier/{id}")
    public ResponseEntity<?> updateSupplier(@PathVariable Long id, @RequestBody SupplierPostVm supplierPostVm) {
        Supplier supplier = supplierPostVm.toSupplier();
        supplier.setSupplierId(id);
        supplierService.updateSupplier(supplier);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Supplier updated successfully");

        return ResponseEntity.status(200).body(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/supplier/{id}")
    public ResponseEntity<?> deleteSupplier(@PathVariable Long id) {
        supplierService.deleteSupplierById(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Supplier deleted successfully");

        return ResponseEntity.status(200).body(response);
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/VehicleController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Services.*;
import com.radical.be_radicalcare.Specifications.VehicleSpecification;
import com.radical.be_radicalcare.ViewModels.SearchVehicleGetVm;
import com.radical.be_radicalcare.ViewModels.VehicleGetVm;
import com.radical.be_radicalcare.ViewModels.VehiclePostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v1")
public class VehicleController {
    private final VehicleService vehicleService;
    private final CategoryService categoryService;
    private final SearchService searchService;
    private final RecentSearchService recentSearchService;
    private final JwtTokenProvider jwtTokenProvider;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/vehicles/search")
    public ResponseEntity<?> searchVehicles(
            @RequestHeader("Authorization") String authorizationHeader,
            @RequestParam(required = false) String keyword,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "chassisNumber") String sortBy,
            @RequestParam(required = false) List<String> segments,
            @RequestParam(required = false) List<String> colors,
            @RequestParam(required = false) Boolean sold,
            @RequestParam(required = false) List<Integer> categoryIds,
            @RequestParam(required = false) Double minCost,
            @RequestParam(required = false) Double maxCost
    ) {
        // Lấy userId từ JWT token
        String token = authorizationHeader.replace("Bearer ", "");
        String userId = jwtTokenProvider.getUserIdFromJWT(token);

        try {
            // Tìm kiếm nhanh
            if (keyword != null && !keyword.trim().isEmpty() &&
                    segments == null && colors == null && sold == null &&
                    categoryIds == null && minCost == null && maxCost == null) {

                // Gọi SearchService để thực hiện tìm kiếm nhanh
                List<SearchVehicleGetVm> vehicles = searchService.searchVehiclesByKeyword(keyword);

                // Lưu lịch sử tìm kiếm
                recentSearchService.saveSearch(userId, keyword);

                // Chuẩn bị phản hồi
                Map<String, Object> response = new HashMap<>();
                response.put("status", 200);
                response.put("message", "Quick search successful");
                response.put("data", vehicles);
                return ResponseEntity.ok(response);
            }

            // Tìm kiếm chi tiết
            Specification<Vehicle> spec = Specification.where(
                            keyword == null || keyword.trim().isEmpty()
                                    ? null
                                    : VehicleSpecification.hasKeyword(keyword, categoryService)
                    )
                    .and(VehicleSpecification.hasSegmentIn(segments))
                    .and(VehicleSpecification.hasColorIn(colors))
                    .and(VehicleSpecification.isSold(sold))
                    .and(VehicleSpecification.hasCategoryIdIn(categoryIds))
                    .and(VehicleSpecification.hasCostBetween(minCost, maxCost));

            // Gọi SearchService để tìm kiếm chi tiết với phân trang
            Page<SearchVehicleGetVm> vehiclesPage = searchService.searchVehicles(spec, page, size, sortBy);

            // Chuẩn bị phản hồi
            Map<String, Object> response = new HashMap<>();
            response.put("status", 200);
            response.put("message", "Vehicles retrieved successfully");
            response.put("data", vehiclesPage.getContent());
            response.put("currentPage", vehiclesPage.getNumber());
            response.put("totalItems", vehiclesPage.getTotalElements());
            response.put("totalPages", vehiclesPage.getTotalPages());

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            // Xử lý lỗi
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "Error during search: " + e.getMessage());
            return ResponseEntity.status(500).body(response);
        }
    }

//    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
//    @GetMapping("/vehicles")
//    public ResponseEntity<?> getAllVehicles(
//            @RequestParam(defaultValue = "0") int page, // Trang hiện tại (mặc định là 0)
//            @RequestParam(required = false) Integer size, // Kích thước trang, có thể null
//            @RequestParam(defaultValue = "chassisNumber") String sortBy
//    ) {
//        // Đặt kích thước mặc định nếu không được truyền
//        int pageSize = (size == null || size <= 0) ? Integer.MAX_VALUE : size;
//
//        // Gọi service để lấy dữ liệu phân trang
//        Page<Vehicle> vehiclePage = vehicleService.getAllVehicles(page, pageSize, sortBy);
//
//        // Chuyển đổi sang ViewModel
//        List<VehicleGetVm> vehicles = vehiclePage.getContent()
//                .stream()
//                .map(VehicleGetVm::fromEntity)
//                .toList();
//
//        // Chuẩn bị phản hồi
//        Map<String, Object> response = new HashMap<>();
//        response.put("status", 200);
//        response.put("message", "Vehicles retrieved successfully");
//        response.put("data", vehicles);
//        response.put("currentPage", vehiclePage.getNumber());
//        response.put("totalItems", vehiclePage.getTotalElements());
//        response.put("totalPages", vehiclePage.getTotalPages());
//
//        return ResponseEntity.ok(response);
//    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/vehicles/all")
    public ResponseEntity<?> getAllVehiclesWithoutPagination(
            @RequestParam(defaultValue = "chassisNumber") String sortBy
    ) {
        // Lấy toàn bộ danh sách xe không phân trang
        List<Vehicle> allVehicles = vehicleService.getAllVehiclesWithoutPagination(sortBy);

        // Chuyển đổi sang ViewModel
        List<VehicleGetVm> vehicles = allVehicles
                .stream()
                .map(VehicleGetVm::fromEntity)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "All vehicles retrieved successfully");
        response.put("data", vehicles);

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/vehicle/{id}")
    public ResponseEntity<?> getVehicleById(@PathVariable String id) {
        return vehicleService.getVehicleById(id)
                .map(vehicle -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "Vehicle retrieved successfully");
                    response.put("data", VehicleGetVm.fromEntity(vehicle));

                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message", "Vehicle not found");

                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping(value = "/vehicle", consumes = "multipart/form-data")
    public ResponseEntity<?> createVehicle(@RequestPart("vehiclePostVm") VehiclePostVm vehiclePostVm,
                                           @RequestPart("images") List<MultipartFile> images) {
        try {
            vehicleService.addVehicle(vehiclePostVm.toEntity(), images);
            Map<String, Object> response = new HashMap<>();
            response.put("status", 201);
            response.put("message", "Vehicle created successfully");

            return ResponseEntity.status(201).body(response);
        } catch (IOException e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "Internal server error");

            return ResponseEntity.status(500).body(response);
        }
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping(value = "/vehicle/{id}", consumes = "multipart/form-data")
    public ResponseEntity<?> updateVehicle(@PathVariable String id,
                                           @RequestPart("vehiclePostVm") VehiclePostVm vehiclePostVm,
                                           @RequestPart("images") List<MultipartFile> images) {
        try {
            vehicleService.updateVehicle(id, vehiclePostVm, images);
            Map<String, Object> response = new HashMap<>();
            response.put("status", 200);
            response.put("message", "Vehicle updated successfully");

            return ResponseEntity.ok(response);
        } catch (IOException e) {
            Map<String, Object> response = new HashMap<>();
            response.put("status", 500);
            response.put("message", "Internal server error");

            return ResponseEntity.status(500).body(response);
        }
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/vehicle/{id}")
    public ResponseEntity<?> deleteVehicle(@PathVariable String id) {
        vehicleService.deleteVehicle(id);
        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Vehicle deleted successfully");

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/vehicles/by-ids")
    public ResponseEntity<?> getVehiclesByIds(@RequestBody List<String> ids) {
        List<VehicleGetVm> vehicles = vehicleService.getVehiclesByIds(ids)
                .stream()
                .map(VehicleGetVm::fromEntity)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "Vehicles retrieved successfully");
        response.put("data", vehicles);

        return ResponseEntity.ok(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Controllers/WarrantyInfoController.java
================
package com.radical.be_radicalcare.Controllers;

import com.radical.be_radicalcare.Entities.WarrantyInfo;
import com.radical.be_radicalcare.Services.WarrantyInfoService;
import com.radical.be_radicalcare.ViewModels.WarrantyInfoGetVm;
import com.radical.be_radicalcare.ViewModels.WarrantyInfoPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
public class WarrantyInfoController {
    private final WarrantyInfoService warrantyInfoService;

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/warranty-info")
    public ResponseEntity<?> getAllWarrantyInfos() {
        List<WarrantyInfoGetVm> warrantyInfos = warrantyInfoService.getAllWarrantyInfos()
                .stream()
                .map(WarrantyInfoGetVm::from)
                .toList();

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "WarrantyInfos retrieved successfully");
        response.put("data", warrantyInfos);

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAnyAuthority('ADMIN','USER')")
    @GetMapping("/warranty-info/{id}")
    public ResponseEntity<?> getWarrantyInfoById(@PathVariable Long id) {
        return warrantyInfoService.getWarrantyInfoById(id)
                .map(warrantyInfo -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 200);
                    response.put("message", "WarrantyInfo retrieved successfully");
                    response.put("data", WarrantyInfoGetVm.from(warrantyInfo));
                    return ResponseEntity.ok(response);
                })
                .orElseGet(() -> {
                    Map<String, Object> response = new HashMap<>();
                    response.put("status", 404);
                    response.put("message", "WarrantyInfo not found");
                    return ResponseEntity.status(404).body(response);
                });
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PostMapping("/warranty-info")
    public ResponseEntity<?> createWarrantyInfo(@RequestBody WarrantyInfoPostVm warrantyInfoPostVm) {
        warrantyInfoService.addWarrantyInfo(warrantyInfoPostVm.toWarrantyInfo());

        Map<String, Object> response = new HashMap<>();
        response.put("status", 201);
        response.put("message", "WarrantyInfo created successfully");

        return ResponseEntity.status(201).body(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @PutMapping("/warranty-info/{id}")
    public ResponseEntity<?> updateWarrantyInfo(@PathVariable Long id, @RequestBody WarrantyInfoPostVm warrantyInfoPostVm) {
        WarrantyInfo warrantyInfo = warrantyInfoPostVm.toWarrantyInfo();
        warrantyInfo.setId(id);
        warrantyInfoService.updateWarrantyInfo(warrantyInfo);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "WarrantyInfo updated successfully");

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasAuthority('ADMIN')")
    @DeleteMapping("/warranty-info/{id}")
    public ResponseEntity<?> deleteWarrantyInfoById(@PathVariable Long id) {
        warrantyInfoService.deleteWarrantyInfoById(id);

        Map<String, Object> response = new HashMap<>();
        response.put("status", 200);
        response.put("message", "WarrantyInfo deleted successfully");

        return ResponseEntity.ok(response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Dto/JwtResponse.java
================
package com.radical.be_radicalcare.Dto;
import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class JwtResponse {
    private String token;
}

================
File: src/main/java/com/radical/be_radicalcare/Dto/LoginRequest.java
================
package com.radical.be_radicalcare.Dto;

import lombok.Data;

@Data
public class LoginRequest {
    private String username;
    private String password;
}

================
File: src/main/java/com/radical/be_radicalcare/Dto/RegisterRequest.java
================
package com.radical.be_radicalcare.Dto;

import jakarta.validation.constraints.*;
import lombok.Data;
import org.hibernate.validator.constraints.Length;

import java.time.LocalDate;

@Data
public class RegisterRequest {

    @NotBlank(message = "Full name is required")
    @Size(max = 100, message = "Full name must be less than 100 characters")
    private String fullName;

    @NotBlank(message = "Username is required")
    @Size(min = 5, max = 50, message = "Username must be between 5 and 50 characters")
    private String username;

    @NotBlank(message = "Email is required")
    @Email(message = "Email must be a valid email address")
    private String email;

    @NotBlank(message = "Password is required")
    @Length(min = 3, message = "Password must be at least 3 characters")
    private String password;

    @NotBlank(message = "Address is required")
    private String address;

    @Past(message = "Date of birth must be in the past")
    private LocalDate doB;

    @NotBlank(message = "Phone number is required")
    @Pattern(regexp = "^[0-9]{10,15}$", message = "Phone number must be between 10 and 15 digits")
    private String phoneNumber;
}

================
File: src/main/java/com/radical/be_radicalcare/Dto/VehicleDto.java
================
package com.radical.be_radicalcare.Dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class VehicleDto {
    @JsonProperty("chassisNumber")
    private String chassisNumber;

    @JsonProperty("vehicleName")
    private String vehicleName;

    @JsonProperty("importDate")
    private LocalDate importDate;

    @JsonProperty("version")
    private String version;

    @JsonProperty("color")
    private String color;

    @JsonProperty("segment")
    private String segment;

    @JsonProperty("isDeleted")
    private Boolean isDeleted;

    @JsonProperty("sold")
    private Boolean sold;

    @JsonProperty("price")
    private Double price;

    @JsonProperty("description")
    private String description;

    @JsonProperty("imageUrls")
    private List<String> imageUrls;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Appointment.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "appointment")
public class Appointment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "date_created")
    private LocalDate dateCreated;
    @Column(name = "status")
    private String status="Pending";
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    private Customer customer;
    @Column(name = "total_amount", nullable = false)
    private Double totalAmount = 0.0;
    @OneToMany(mappedBy = "appointment", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<AppointmentDetail> appointmentDetails;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/AppointmentDetail.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "appointment_detail")
public class AppointmentDetail {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "description")
    private String description;
    @Column(name = "service_date")
    private LocalDate serviceDate;
    @Column(name = "service_cost")
    private Double serviceCost;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "service_id", referencedColumnName = "service_id")
    @ToString.Exclude
    private MotorService motorService;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "appointment_id", referencedColumnName = "id")
    @JsonIgnore // Ngăn đệ quy ngược về Appointment
    private Appointment appointment;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Cart.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.radical.be_radicalcare.Constants.Provider;
import com.radical.be_radicalcare.Validator.Annotation.ValidUsername;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.*;
import org.hibernate.Hibernate;
import org.hibernate.validator.constraints.Length;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.*;
import java.util.stream.Collectors;

@Getter
@Setter
@ToString
@RequiredArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "cart")
@JsonIdentityInfo(
        generator = ObjectIdGenerators.PropertyGenerator.class,
        property = "id"
)
public class Cart {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id")
    private String id;

    @Column(name = "user_id", nullable = false)
    private String userId;

    @JsonManagedReference
    @ToString.Exclude
    @OneToMany(mappedBy = "cart", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CartItem> items = new ArrayList<>();

    @Column(name = "total_cost", nullable = false)
    private Double totalCost = 0.0;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/CartItem.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.radical.be_radicalcare.Dto.VehicleDto;
import jakarta.persistence.*;
import lombok.*;

@Getter
@Setter
@ToString
@RequiredArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "cart_item")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class CartItem {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID) // Sử dụng UUID để đảm bảo ID là duy nhất
    @Column(name = "id", nullable = false)
    private String id;

    @JsonBackReference
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cart_id", nullable = false)
    private Cart cart;
//
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "vehicle_id", nullable = false)
//    private Vehicle vehicle;

    @Column(name = "quantity", nullable = false)
    private Integer quantity;

    @Column(name = "price", nullable = false)
    private Double price;

    @Column(name = "subtotal", nullable = false)
    private Double subtotal;

    @Transient // Không lưu trong database, chỉ lưu trong Redis
    @JsonSerialize
    @JsonDeserialize
    private VehicleDto vehicleDto;

}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Category.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "category")
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id")
    private Long id;
    @Column(name = "category_name", length = 50, nullable = false)
    private String categoryName;
    @Column(name = "is_deleted")
    private Boolean isDeleted;
    @OneToMany(mappedBy = "categoryId", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Vehicle> vehicles;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "warranty_info_id", referencedColumnName = "id")
    @OnDelete(action = OnDeleteAction.SET_NULL)
    @ToString.Exclude
    private WarrantyInfo warrantyInfo;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Contract.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "contract")
public class Contract {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "date_created")
    private LocalDate dateCreated;
    @Column(name = "total_amount")
    private Double totalAmount;
    @Column(name = "down_payment")
    private Double downPayment;
    @Column(name = "status")
    private String status;
    @Column(name = "is_installment")
    private Boolean isInstallment;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    private Customer customer;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "employee_id", referencedColumnName = "id")
    @ToString.Exclude
    private Employee employee;
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "chassis_number", referencedColumnName = "chassis_number")
    @ToString.Exclude
    private Vehicle chassisNumber;
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "installment_plan_id", referencedColumnName = "id")
    @ToString.Exclude
    private InstallmentPlan installmentPlan;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/CostTable.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "cost_table")
public class CostTable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "cost_id")
    private Long costId;
    @Column(name = "date_created")
    private LocalDate dateCreated;
    @Column(name = "base_cost")
    private Double baseCost;
    @Column(name = "is_deleted")
    private Boolean isDeleted;
    @OneToMany(mappedBy = "costId", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Vehicle> vehicles;
    @OneToMany(mappedBy = "costId", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<MotorService> motorServices;
    @OneToMany(mappedBy = "costTable", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Product> products;
    public double getPrice() {
        return baseCost;
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Customer.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "customer")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id")
    private String id;
    @Column(name = "full_name")
    private String fullName;
    @Column(name = "date_of_birth")
    private LocalDate doB;
    @Column(name = "address")
    private String address;
    @Column(name = "phone_number")
    private String phoneNumber;
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    @ToString.Exclude
    private User userId;
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Appointment> appointments;
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Contract> contracts;
    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Invoice> invoices;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Employee.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "employee")
public class Employee{
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id")
    private String id;
    @Column(name = "full_name")
    private String fullName;
    @Column(name = "date_of_birth")
    private LocalDate dob;
    @Column(name = "position")
    private String position;
    @Column(name = "address")
    private String address;
    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Contract> contracts;
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    @ToString.Exclude
    private User userId;
    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Invoice> invoices;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/GpsLocation.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "gps_location")
public class GpsLocation {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "latitude", nullable = false)
    private double latitude;

    @Column(name = "longitude", nullable = false)
    private double longitude;

    @Column(name = "timestamp", nullable = false)
    private LocalDateTime timestamp;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    private Customer customer;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    private User user;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/InstallmentPlan.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

import java.util.Date;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "installment_plan")
public class InstallmentPlan {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "installment_amount")
    private Double installmentAmount;
    @Column(name = "installment_term")
    private Double installmentTerm;
    @Column(name = "start_date")
    private Date startDate;
    @Column(name = "end_date")
    private Date endDate;
    @Column(name = "bank_name")
    private String bankName;
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id", referencedColumnName = "id")
    @ToString.Exclude
    private Contract contract;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Invoice.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.util.Date;
import java.util.List;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "invoice")
public class Invoice {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "created_date")
    private Date createdDate;
    @Column(name = "total_amount")
    private Double totalAmount;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    private Customer customer;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "employee_id", referencedColumnName = "id")
    @ToString.Exclude
    private Employee employee;

    @OneToMany(mappedBy = "invoice", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<InvoiceDetail> invoiceDetails;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/InvoiceDetail.java
================
package com.radical.be_radicalcare.Entities;


import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "invoice_detail")
public class InvoiceDetail {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "quantity")
    private Double quantity;
    @Column(name = "price")
    private Double price;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "invoice_id", referencedColumnName = "id")
    @ToString.Exclude
    private Invoice invoice;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", referencedColumnName = "id")
    @ToString.Exclude
    private Product product;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Menu.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Menu {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String url;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent")
    @JsonManagedReference
    private Menu parent;

    @OneToMany(mappedBy = "parent", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JsonBackReference
    private List<Menu> children;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Message.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDateTime;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "messages")
public class Message {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "sender_id", nullable = false)
    private String senderId;

    @Column(name = "recipient_id", nullable = false)
    private String recipientId;

    @Column(name = "content", nullable = false)
    private String content;

    @Column(name = "message_type", nullable = false)
    private String messageType; // TEXT, IMAGE

    @Column(name = "timestamp", nullable = false)
    private LocalDateTime timestamp;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/MotorService.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.util.List;

@Entity
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "motor_service")
public class MotorService {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "service_id")
    private Long serviceId;
    @Column(name = "service_name", length = 50, nullable = false)
    private String serviceName;
    @Column(name = "service_description", nullable = false)
    private String serviceDescription;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cost_id", referencedColumnName = "cost_id")
    @ToString.Exclude
    private CostTable costId;
    @Column(name = "is_deleted")
    private Boolean isDeleted;
    @OneToMany(mappedBy = "motorService", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<AppointmentDetail> appointmentDetails;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Product.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "product")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "name")
    private String name;
    @Column(name = "description")
    private String description;
    @Column(name = "brand")
    private String brand;

    @OneToMany(mappedBy = "productId", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<ProductImage> productImages;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cost_id", referencedColumnName = "cost_id")
    @ToString.Exclude
    private CostTable costTable;

    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<InvoiceDetail> invoiceDetails;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/ProductImage.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "product_image")
public class ProductImage {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "image_url", nullable = false)
    private String imageUrl;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", referencedColumnName = "id")
    @ToString.Exclude
    private Product productId;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Role.java
================
package com.radical.be_radicalcare.Entities;

import com.radical.be_radicalcare.Constants.RoleType;
import jakarta.persistence.*;
import jakarta.validation.constraints.Size;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;

import java.util.HashSet;
import java.util.Set;

@Getter
@Setter
@ToString
@RequiredArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "role")
public class Role implements GrantedAuthority {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "name", length = 50, nullable = false)
    @Enumerated(EnumType.STRING)
    private RoleType name;

    @Size(max = 250, message = "Description must be less than 250 characters")
    @Column(name = "description", length = 250)
    private String description;

    @ManyToMany(mappedBy = "roles", cascade = CascadeType.ALL)
    @ToString.Exclude
    private Set<User> users = new HashSet<>();

    public Role(RoleType roleType) {
        this.name = roleType;
    }

    @Override
    public String getAuthority() {
        return name.name();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Supplier.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "supplier")
public class Supplier {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "supplier_id")
    private Long supplierId;
    @Column(name = "supplier_name", length = 50, nullable = false)
    private String supplierName;
    @Column(name = "supplier_address", nullable = false)
    private String supplierAddress;
    @Column(name = "supplier_phone", nullable = false)
    private String supplierPhone;
    @Column(name = "supplier_email",nullable = false)
    private String supplierEmail;
    @Column(name = "is_deleted")
    private Boolean isDeleted;
    @OneToMany(mappedBy = "supplierId", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<Vehicle> vehicles;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/User.java
================
package com.radical.be_radicalcare.Entities;

import com.radical.be_radicalcare.Constants.Provider;
import com.radical.be_radicalcare.Validator.Annotation.ValidUsername;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.*;
import org.hibernate.Hibernate;
import org.hibernate.validator.constraints.Length;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.*;
import java.util.stream.Collectors;

@Getter
@Setter
@ToString
@RequiredArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "user")
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id")
    private String id;

    @Column(name = "username", length = 50, unique = true)
    @NotBlank(message = "Username is required")
    @Size(min = 1, max = 50, message = "Username must be between 1 and 50 characters")
    @ValidUsername
    private String username;

    @Column(name = "full_name", length = 50)
    private String fullName;

    @Column(name = "password", length = 250)
    @NotBlank(message = "Password is required")
    private String password;

    @Column(name = "email", length = 50, unique = true)
    @NotBlank(message = "Email is required")
    @Size(min = 1, max = 50, message = "Email must be between 1 and 50 characters")
    @Email
    private String email;

    @Column(name = "phone", length = 10, unique = true)
    @Length(min = 9, max = 10, message = "Phone must be 9-10 characters")
    @Pattern(regexp = "^[0-9]*$", message = "Phone must be number")
    private String phone;

    @Column(name = "gender", length = 10)
    private String gender;

    @Enumerated(EnumType.STRING)
    private Provider provider;

    @Column(name = "account_non_expired", nullable = false)
    private Boolean  accountNonExpired = true;

    @Column(name = "account_non_locked", nullable = false)
    private Boolean  accountNonLocked = true;

    @Column(name = "credentials_non_expired", nullable = false)
    private Boolean  credentialsNonExpired = true;

    @Column(name = "enabled", nullable = false)
    private Boolean  enabled = true;

    @Column(name = "lock_expired", nullable = true)
    private Date lockExpired;

    @Column(name = "count_fail", nullable = false)
    private int countFail = 0;

    @Column(name = "token_reset_password", nullable = true)
    private String tokenResetPassword;

    @Column(name = "token_reset_password_expired", nullable = true)
    private Date tokenResetPasswordExpired;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return roles.stream().map(role -> new SimpleGrantedAuthority(role.getName().name())).collect(Collectors.toSet());
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return this.accountNonExpired;
    }

    @Override
    public boolean isAccountNonLocked() {
        return this.accountNonLocked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return this.credentialsNonExpired;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        User user = (User) o;
        return getId() != null && Objects.equals(getId(), user.getId());
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/Vehicle.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.radical.be_radicalcare.Dto.VehicleDto;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;


@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "vehicle")
public class Vehicle {
    @Id
    @Column(name= "chassis_number",length = 17)
    private String chassisNumber;
    @Column(name = "vehicle_name", length = 50, nullable = false)
    @Size(min = 1, max = 50, message = "Vehicle Name must be between 1 and 50 characters")
    @NotBlank(message = "Vehicle Name must not be blank")
    private String vehicleName;
    @Column(name = "import_date")
    private LocalDate importDate;
    @Column(name = "version", length = 50, nullable = false)
    @Size(min = 1, max = 50, message = "version must be between 1 and 50 characters")
    @NotBlank(message = "version must not be blank")
    private String version;
    @Column(name = "color", length = 50, nullable = false)
    @Size(min = 1, max = 50, message = "color must be between 1 and 50 characters")
    @NotBlank(message = "color must not be blank")
    private String color;
    @Column(name = "segment", length = 50, nullable = false)
    @Size(min = 1, max = 50, message = "segment must be between 1 and 50 characters")
    @NotBlank(message = "segment must not be blank")
    private String segment;
    @Column(name = "is_deleted")
    private Boolean isDeleted;
    @Column(name = "sold")
    private Boolean sold;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cost_id", referencedColumnName = "cost_id")
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    @ToString.Exclude
    private CostTable costId;
    @ManyToOne(fetch = FetchType.LAZY)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    @JoinColumn(name = "category_id", referencedColumnName = "category_id")
    @ToString.Exclude
    private Category categoryId;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "supplier_id", referencedColumnName = "supplier_id")
    @ToString.Exclude
    private Supplier supplierId;
    @Column(name = "description")
    private String description;
    @OneToMany(mappedBy = "chassisNumber", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<WarrantyHistory> warrantyHistory;
    @OneToMany(mappedBy = "chassisNumber", cascade = CascadeType.ALL)
    @ToString.Exclude
    @JsonIgnore
    private List<VehicleImage> vehicleImages;
    @JsonIgnore
    public List<String> getImageUrls() {
        return vehicleImages.stream().map(VehicleImage::getImageUrl).collect(Collectors.toList());
    }
    public double getPrice() {
        return costId != null ? costId.getPrice() : 0.0; // Trả về giá từ CostTable, hoặc 0.0 nếu null
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/VehicleImage.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "image")
public class VehicleImage {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "image_url", nullable = false)
    private String imageUrl;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "chassis_number", referencedColumnName = "chassis_number")
    @ToString.Exclude
    private Vehicle chassisNumber;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/WarrantyHistory.java
================
package com.radical.be_radicalcare.Entities;

import jakarta.persistence.*;
import lombok.*;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "warranty_history")
public class WarrantyHistory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    private String warrantyType;
    private String warrantyDescription;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "chassis_number", referencedColumnName = "chassis_number")
    @ToString.Exclude
    private Vehicle chassisNumber;
}

================
File: src/main/java/com/radical/be_radicalcare/Entities/WarrantyInfo.java
================
package com.radical.be_radicalcare.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;

import java.util.Date;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Builder
@Table(name = "warranty_info")
public class WarrantyInfo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;
    @Column(name = "warranty_type")
    private String warrantyType;
    @Column(name = "warranty_description")
    private String warrantyDescription;

    @OneToMany(mappedBy = "warrantyInfo", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @ToString.Exclude
    @JsonIgnore
    private List<Category> category;
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IAppointmentDetailRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.AppointmentDetail;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface IAppointmentDetailRepository extends JpaRepository<AppointmentDetail, Long> {}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IAppointmentRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Appointment;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface IAppointmentRepository extends JpaRepository<Appointment, Long> {}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/ICartItemRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Cart;
import com.radical.be_radicalcare.Entities.CartItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ICartItemRepository extends JpaRepository<CartItem, String> {
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/ICartRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Cart;
import com.radical.be_radicalcare.Entities.CartItem;
import com.radical.be_radicalcare.Entities.Vehicle;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

public interface ICartRepository extends JpaRepository<Cart, String> {
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/ICategoryRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ICategoryRepository extends JpaRepository<Category, Long> {
    List<Category> findByCategoryNameContainingIgnoreCase(String name);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/ICostTableRepository.java
================
package com.radical.be_radicalcare.Repositories;


import com.radical.be_radicalcare.Entities.CostTable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ICostTableRepository extends JpaRepository<CostTable, Long> {
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/ICustomerRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface ICustomerRepository extends JpaRepository<Customer, String> {
    Optional<Customer> findByUserId_Id(String userId);
    Optional<Customer> findByPhoneNumber(String phoneNumber);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IFilterRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Vehicle;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface IFilterRepository extends JpaRepository<Vehicle, String>, JpaSpecificationExecutor<Vehicle> {
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IGpsLocationRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.GpsLocation;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IGpsLocationRepository extends JpaRepository<GpsLocation, Long> {
    GpsLocation findFirstByUserId_IdOrderByTimestampDesc(String userId);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IMessageRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Message;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface IMessageRepository extends JpaRepository<Message, Long> {
    // Thêm phương thức để tìm lịch sử tin nhắn
    List<Message> findBySenderIdAndRecipientIdOrderByTimestampAsc(String senderId, String recipientId);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IMotorServicesRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.MotorService;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;

@Repository
public interface IMotorServicesRepository extends JpaRepository<MotorService, Long>, JpaSpecificationExecutor<MotorService> {
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IProductImageRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.ProductImage;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface IProductImageRepository extends JpaRepository<ProductImage, Long> {
    @Query("SELECT pi FROM ProductImage pi WHERE pi.productId.id = :productId")
    List<ProductImage> findByProductId(Long productId);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IProductRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface IProductRepository extends
        JpaRepository<Product, Long>,
        PagingAndSortingRepository<Product, Long> {

}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IRoleRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface IRoleRepository extends JpaRepository<Role, Long> {
    Role findRoleById(Long id);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/ISupplierRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Supplier;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ISupplierRepository extends JpaRepository<Supplier, Long> {

}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IUserRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface IUserRepository extends JpaRepository<User, String> {
    User findByUsername(String username);
    User findByEmail(String email);

    Optional<User> findByTokenResetPassword(String token);

}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IVehicleImageRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Entities.VehicleImage;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface IVehicleImageRepository extends JpaRepository<VehicleImage, Long> {
    @Query("SELECT vi FROM VehicleImage vi WHERE vi.chassisNumber.chassisNumber = :chassisNumber")
    List<VehicleImage> findByVehicleId(String chassisNumber);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IVehicleRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.Vehicle;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

public interface IVehicleRepository extends
        JpaRepository<Vehicle, String>,
        PagingAndSortingRepository<Vehicle, String>,
        JpaSpecificationExecutor<Vehicle> {
    @Query("SELECT v FROM Vehicle v " +
            "LEFT JOIN FETCH v.categoryId " +
            "LEFT JOIN FETCH v.costId")
    List<Vehicle> findAllWithRelations();

    @Query("SELECT v FROM Vehicle v " +
            "LEFT JOIN FETCH v.categoryId " +
            "LEFT JOIN FETCH v.costId " +
            "WHERE v.chassisNumber = :chassisNumber")
    Optional<Vehicle> findByIdWithRelations(@Param("chassisNumber") String chassisNumber);

    @Query("SELECT v FROM Vehicle v " +
            "LEFT JOIN FETCH v.categoryId " +
            "LEFT JOIN FETCH v.costId " +
            "WHERE (:keyword IS NULL OR v.vehicleName LIKE %:keyword%)")
    Page<Vehicle> findAllWithRelations(@Param("keyword") String keyword, Pageable pageable);
}

================
File: src/main/java/com/radical/be_radicalcare/Repositories/IWarrantyInfoRepository.java
================
package com.radical.be_radicalcare.Repositories;

import com.radical.be_radicalcare.Entities.WarrantyInfo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface IWarrantyInfoRepository extends JpaRepository<WarrantyInfo, Long> {
}

================
File: src/main/java/com/radical/be_radicalcare/Services/AppointmentService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.Appointment;
import com.radical.be_radicalcare.Entities.AppointmentDetail;
import com.radical.be_radicalcare.Entities.Customer;
import com.radical.be_radicalcare.Entities.MotorService;
import com.radical.be_radicalcare.Repositories.IAppointmentDetailRepository;
import com.radical.be_radicalcare.Repositories.IAppointmentRepository;
import com.radical.be_radicalcare.Repositories.ICustomerRepository;
import com.radical.be_radicalcare.Repositories.IMotorServicesRepository;
import com.radical.be_radicalcare.ViewModels.AppointmentGetVm;
import com.radical.be_radicalcare.ViewModels.AppointmentPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
public class AppointmentService {

    private final IAppointmentRepository appointmentRepository;
    private final ICustomerRepository customerRepository;
    private final IMotorServicesRepository motorServicesRepository;
    private final IAppointmentDetailRepository appointmentDetailRepository;

    public List<Appointment> getAllAppointments() {
        return appointmentRepository.findAll();
    }

    public Optional<Appointment> getAppointmentById(Long id) {
        return appointmentRepository.findById(id);
    }

    public void addAppointment(AppointmentPostVm appointmentPostVm) {
        Customer customer = customerRepository.findById(appointmentPostVm.customerId())
                .orElseThrow(() -> new IllegalArgumentException("Customer not found"));

        // Tạo Appointment với ngày tạo mặc định là ngày hiện tại
        Appointment appointment = Appointment.builder()
                .dateCreated(LocalDate.now()) // Ngày tạo phiếu
                .status("Pending")
                .customer(customer)
                .build();

        Appointment savedAppointment = appointmentRepository.save(appointment);

        // Lấy một ngày chung cho tất cả dịch vụ, nếu không có sẽ sử dụng ngày hiện tại
        LocalDate commonServiceDate = appointmentPostVm.serviceDates() != null && !appointmentPostVm.serviceDates().isEmpty()
                ? appointmentPostVm.serviceDates().get(0) // Lấy ngày đầu tiên trong danh sách serviceDates (nếu có)
                : LocalDate.now(); // Nếu không có, dùng ngày hiện tại làm mặc định

        // Lưu chi tiết các dịch vụ với ngày chung
        Double totalAmount = saveAppointmentDetails(
                appointmentPostVm.serviceIds(),
                savedAppointment,
                commonServiceDate // Sử dụng ngày chung cho tất cả dịch vụ
        );

        savedAppointment.setTotalAmount(totalAmount);
        appointmentRepository.save(savedAppointment);
    }

    public void updateAppointment(Long appointmentId, AppointmentPostVm appointmentPostVm) {
        Appointment existingAppointment = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new IllegalArgumentException("Appointment not found"));

        Customer customer = customerRepository.findById(appointmentPostVm.customerId())
                .orElseThrow(() -> new IllegalArgumentException("Customer not found"));

        existingAppointment.setDateCreated(appointmentPostVm.dateCreated());
        existingAppointment.setCustomer(customer);

        // Xóa chi tiết dịch vụ cũ và lưu mới với ngày chung
        appointmentDetailRepository.deleteAll(existingAppointment.getAppointmentDetails());
        saveAppointmentDetails(
                appointmentPostVm.serviceIds(),
                existingAppointment,
                appointmentPostVm.serviceDates() != null && !appointmentPostVm.serviceDates().isEmpty()
                        ? appointmentPostVm.serviceDates().get(0) // Lấy ngày chung cho tất cả dịch vụ
                        : LocalDate.now()
        );

        appointmentRepository.save(existingAppointment);
    }

    public void deleteAppointment(Long appointmentId) {
        Appointment appointment = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new IllegalArgumentException("Appointment not found"));

        appointmentDetailRepository.deleteAll(appointment.getAppointmentDetails());
        appointmentRepository.delete(appointment);
    }

    public List<AppointmentGetVm> searchAppointments(Long customerId, LocalDate dateCreated, List<Long> serviceIds) {
        return appointmentRepository.findAll().stream()
                .filter(appointment -> {
                    boolean matchesCustomer = customerId == null || appointment.getCustomer().getId().equals(String.valueOf(customerId));
                    boolean matchesDate = dateCreated == null || appointment.getDateCreated().equals(dateCreated);
                    boolean matchesService = serviceIds == null || appointment.getAppointmentDetails().stream()
                            .anyMatch(detail -> serviceIds.contains(detail.getMotorService().getServiceId()));

                    return matchesCustomer && matchesDate && matchesService;
                })
                .map(AppointmentGetVm::fromEntity)
                .collect(Collectors.toList());
    }

    private Double saveAppointmentDetails(List<Long> serviceIds, Appointment appointment, LocalDate serviceDate) {
        // Kiểm tra số lượng serviceIds và serviceDates có khớp không
        if (serviceIds == null || serviceIds.isEmpty()) {
            throw new IllegalArgumentException("Service IDs cannot be empty.");
        }

        // Lưu chi tiết dịch vụ vào danh sách
        List<AppointmentDetail> details = serviceIds.stream()
                .map(serviceId -> {
                    MotorService service = motorServicesRepository.findById(serviceId)
                            .orElseThrow(() -> new IllegalArgumentException("Service not found"));

                    return AppointmentDetail.builder()
                            .appointment(appointment)
                            .motorService(service)
                            .serviceDate(serviceDate) // Gán ngày chung cho tất cả các dịch vụ
                            .serviceCost(service.getCostId().getBaseCost())
                            .description(service.getServiceName())
                            .build();
                })
                .collect(Collectors.toList());

        appointmentDetailRepository.saveAll(details);

        // Tính tổng chi phí của tất cả các dịch vụ
        return details.stream()
                .mapToDouble(AppointmentDetail::getServiceCost)
                .sum();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/CartService.java
================
package com.radical.be_radicalcare.Services;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.radical.be_radicalcare.Dto.VehicleDto;
import com.radical.be_radicalcare.Entities.Cart;
import com.radical.be_radicalcare.Entities.CartItem;
import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Entities.VehicleImage;
import com.radical.be_radicalcare.Repositories.ICartRepository;
import com.radical.be_radicalcare.Repositories.IVehicleRepository;
import com.radical.be_radicalcare.ViewModels.CartItemGetVm;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Slf4j
@Service
public class CartService {

    @Autowired
    private ICartRepository cartRepository;
    @Autowired
    private IVehicleRepository vehicleRepository;
    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    private static final String CART_CACHE_PREFIX = "cart:";

    private VehicleDto toVehicleDto(Vehicle vehicle) {
        List<String> imageUrls = vehicle.getVehicleImages() != null
                ? vehicle.getVehicleImages().stream().map(VehicleImage::getImageUrl).collect(Collectors.toList())
                : new ArrayList<>();

        return VehicleDto.builder()
                .chassisNumber(vehicle.getChassisNumber())
                .vehicleName(vehicle.getVehicleName())
                .importDate(vehicle.getImportDate())
                .version(vehicle.getVersion())
                .color(vehicle.getColor())
                .segment(vehicle.getSegment())
                .isDeleted(vehicle.getIsDeleted())
                .sold(vehicle.getSold())
                .price(vehicle.getPrice())
                .description(vehicle.getDescription())
                .imageUrls(imageUrls)
                .build();
    }

    public Cart getTemporaryCart(String userId) {
        String cacheKey = CART_CACHE_PREFIX + userId;

        // Lấy dữ liệu từ Redis
        Object cachedCart = redisTemplate.opsForValue().get(cacheKey);

        Cart cart = null;

        if (cachedCart instanceof LinkedHashMap) {
            // Chuyển đổi từ LinkedHashMap sang Cart
            cart = objectMapper.convertValue(cachedCart, Cart.class);

            if (cart != null && cart.getItems() != null) {
                // Xử lý các CartItem
                cart.getItems().forEach(item -> {
                    if (item.getVehicleDto() == null) {
                        log.warn("VehicleDto is null for CartItem: {}", item.getId());
                    } else {
                        log.info("Deserialized VehicleDto: {}", item.getVehicleDto());
                    }
                });
            }
        } else if (cachedCart instanceof Cart) {
            cart = (Cart) cachedCart;

            if (cart.getItems() != null) {
                cart.getItems().forEach(item -> {
                    if (item.getVehicleDto() == null) {
                        log.warn("VehicleDto is null for CartItem: {}", item.getId());
                    } else {
                        log.info("Deserialized VehicleDto: {}", item.getVehicleDto());
                    }
                });
            }
        } else {
            log.warn("No cart found for user ID: {}", userId);
        }

        return cart;
    }


    public void saveTemporaryCart(String userId, String chassisNumber, int quantity) {
        String cacheKey = CART_CACHE_PREFIX + userId;

        // Lấy Cart từ Redis
        Object cachedCart = redisTemplate.opsForValue().get(cacheKey);

        Cart cart;
        if (cachedCart instanceof LinkedHashMap) {
            cart = objectMapper.convertValue(cachedCart, Cart.class);
        } else if (cachedCart instanceof Cart) {
            cart = (Cart) cachedCart;
        } else {
            cart = new Cart();
            cart.setId(UUID.randomUUID().toString());
            cart.setUserId(userId);
            cart.setItems(new ArrayList<>());
            log.info("Created new cart with ID: {}", cart.getId());
        }

        // Lấy thông tin Vehicle từ cơ sở dữ liệu
        Vehicle vehicle = vehicleRepository.findById(chassisNumber)
                .orElseThrow(() -> new IllegalArgumentException("Vehicle not found with chassis number: " + chassisNumber));

        // Chuyển đổi Vehicle sang VehicleDto
        VehicleDto vehicleDto = toVehicleDto(vehicle);

        // Tạo CartItem mới
        CartItem item = new CartItem();
        item.setId(UUID.randomUUID().toString());
        item.setVehicleDto(vehicleDto); // Gán DTO thay vì thực thể Vehicle
        item.setQuantity(quantity);
        item.setPrice(vehicleDto.getPrice());
        item.setSubtotal(vehicleDto.getPrice() * quantity);
        item.setCart(cart);

        // Kiểm tra vehicleDto đã được khởi tạo đầy đủ
        if (item.getVehicleDto() == null) {
            throw new IllegalStateException("VehicleDto is null before saving to Redis");
        }
        log.info("CartItem created with VehicleDto: {}", item.getVehicleDto());


        // Thêm CartItem vào danh sách
        cart.getItems().add(item);

        // Cập nhật tổng chi phí
        double totalCost = cart.getItems().stream().mapToDouble(CartItem::getSubtotal).sum();
        cart.setTotalCost(totalCost);

        // Lưu Cart vào Redis
        log.info("Saving cart to Redis: {}", cart);
        redisTemplate.opsForValue().set(cacheKey, cart, 30, TimeUnit.MINUTES);
        log.info("Cart saved to Redis with key: {}", cacheKey);
    }
    public void updateCartItemQuantity(String userId, String cartItemId, int newQuantity) {
        String cacheKey = CART_CACHE_PREFIX + userId;

        // Lấy Cart từ Redis
        Cart cart = getTemporaryCart(userId);

        if (cart == null) {
            throw new IllegalArgumentException("Cart not found for userId: " + userId);
        }

        // Tìm CartItem cần cập nhật
        CartItem itemToUpdate = cart.getItems().stream()
                .filter(item -> item.getId().equals(cartItemId))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("CartItem not found: " + cartItemId));

        // Cập nhật quantity và subtotal
        itemToUpdate.setQuantity(newQuantity);
        itemToUpdate.setSubtotal(itemToUpdate.getPrice() * newQuantity);

        // Tính lại tổng chi phí của giỏ hàng
        double totalCost = cart.getItems().stream()
                .mapToDouble(CartItem::getSubtotal)
                .sum();
        cart.setTotalCost(totalCost);

        // Lưu lại Cart vào Redis
        redisTemplate.opsForValue().set(cacheKey, cart, 30, TimeUnit.MINUTES);
        log.info("Updated CartItem quantity in Redis: {}", itemToUpdate);
    }

    public void cleanUpCart(String userId) {
        String cacheKey = CART_CACHE_PREFIX + userId;
        Cart cart = getTemporaryCart(userId);

        if (cart != null && cart.getItems() != null) {
            cart.getItems().forEach(item -> {
                if (item.getVehicleDto() == null) {
                    // Tìm Vehicle từ database và tạo VehicleDto
                    Vehicle vehicle = vehicleRepository.findById(item.getId())
                            .orElse(null);

                    if (vehicle != null) {
                        item.setVehicleDto(toVehicleDto(vehicle));
                        log.info("Updated VehicleDto for CartItem: {}", item.getId());
                    } else {
                        log.warn("Vehicle not found for CartItem: {}", item.getId());
                    }
                }
            });

            // Lưu lại cart đã được cập nhật
            redisTemplate.opsForValue().set(cacheKey, cart, 30, TimeUnit.MINUTES);
        }
    }

    public void removeCartItem(String userId, String cartItemId) {
        String cacheKey = CART_CACHE_PREFIX + userId;

        // Lấy giỏ hàng từ Redis
        Cart cart = getTemporaryCart(userId);
        if (cart == null) {
            throw new IllegalArgumentException("Cart not found for userId: " + userId);
        }

        // Xóa sản phẩm khỏi danh sách
        cart.getItems().removeIf(item -> item.getId().equals(cartItemId));

        // Cập nhật lại tổng chi phí
        double totalCost = cart.getItems().stream()
                .mapToDouble(CartItem::getSubtotal)
                .sum();
        cart.setTotalCost(totalCost);

        // Lưu giỏ hàng đã cập nhật vào Redis
        redisTemplate.opsForValue().set(cacheKey, cart, 30, TimeUnit.MINUTES);
    }

//    public void removeVehicleFromTemporaryCart(String userId, String chassisNumber) {
//        String cacheKey = CART_CACHE_PREFIX + userId;
//        Cart cart = (Cart) redisTemplate.opsForValue().get(cacheKey);
//        if (cart != null) {
//            cart.getItems().removeIf(item -> item.getVehicle().getChassisNumber().equals(chassisNumber));
//            redisTemplate.opsForValue().set(cacheKey, cart, 30, TimeUnit.MINUTES);
//        }
//    }
//
//    public void removeVehicleFromPersistentCart(String userId, String chassisNumber) {
//        Cart cart = cartRepository.findByUserId(userId).orElse(null);
//        if (cart != null) {
//            cart.getItems().removeIf(item -> item.getVehicle().getChassisNumber().equals(chassisNumber));
//            cartRepository.save(cart);
//        }
//    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/CategoryService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.Category;
import com.radical.be_radicalcare.Entities.WarrantyInfo;
import com.radical.be_radicalcare.Repositories.ICategoryRepository;
import com.radical.be_radicalcare.Repositories.IWarrantyInfoRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
public class CategoryService {

    private final ICategoryRepository categoryRepository;
    private final IWarrantyInfoRepository warrantyInfoRepository;

    public List<Category> getAllCategories() {
        return categoryRepository.findAll();
    }

    public Optional<Category> getCategoryById(Long categoryId) {
        return categoryRepository.findById(categoryId);
    }

    public void addCategory(Category category) {
        categoryRepository.save(category);
    }

    public void updateCategory(Category category) {
        Category existingCategory = categoryRepository.findById(category.getId())
                .orElseThrow(() -> new RuntimeException("Category not found"));

        existingCategory.setCategoryName(category.getCategoryName());

        WarrantyInfo warrantyInfo = warrantyInfoRepository.findById(category.getWarrantyInfo().getId())
                .orElseThrow(() -> new RuntimeException("WarrantyInfo not found"));
        existingCategory.setWarrantyInfo(warrantyInfo);

        categoryRepository.save(existingCategory);
    }
    public List<Long> getCategoryIdsByName(String name) {
        return categoryRepository.findByCategoryNameContainingIgnoreCase(name)
                .stream()
                .map(Category::getId)
                .collect(Collectors.toList());
    }
    public void deleteCategoryById(Long categoryId) {
        categoryRepository.deleteById(categoryId);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/CloudinaryService.java
================
package com.radical.be_radicalcare.Services;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import io.github.cdimascio.dotenv.Dotenv;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
public class CloudinaryService {
    private final Cloudinary cloudinary;

    public CloudinaryService() {
        Dotenv dotenv = Dotenv.load();

        this.cloudinary = new Cloudinary(ObjectUtils.asMap(
                "cloud_name", dotenv.get("CLOUDINARY_CLOUD_NAME"),
                "api_key", dotenv.get("CLOUDINARY_API_KEY"),
                "api_secret", dotenv.get("CLOUDINARY_API_SECRET")));
    }

    public Map upload(MultipartFile file) throws IOException {
        Map uploadResult;
        try {
            uploadResult = cloudinary.uploader().upload(file.getBytes(),
                    ObjectUtils.asMap("resource_type", "auto"));
        } catch (IOException e) {
            throw new IOException("Could not upload file to Cloudinary: " + e.getMessage());
        }
        return uploadResult;
    }

    public void delete(String imageUrl) {
        String publicId = extractPublicId(imageUrl);
        try {
            Map<String, Object> result = cloudinary.uploader().destroy(publicId, ObjectUtils.emptyMap());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String extractPublicId(String url) {
        return url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.'));
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Services/CostTableService.java
================
package com.radical.be_radicalcare.Services;


import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Repositories.ICostTableRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
@RequiredArgsConstructor
public class CostTableService {
    private final ICostTableRepository costTableRepository;

    public List<CostTable> getAllCostTable() {
        return costTableRepository.findAll();
    }

    public Optional<CostTable> getCostTableById(Long costTableId) {
        return costTableRepository.findById(costTableId);
    }

    public void addCostTable(CostTable costTable) {
        costTableRepository.save(costTable);
    }

    public void updateCostTable(CostTable costTable) {
        CostTable existingCostTable = costTableRepository.findById(costTable.getCostId())
                .orElseThrow(() -> new RuntimeException("costTableId not found"));

        existingCostTable.setDateCreated(costTable.getDateCreated());
        existingCostTable.setBaseCost(costTable.getBaseCost());

        costTableRepository.save(existingCostTable);
    }

    public void deleteCostTable(Long costTableId){costTableRepository.deleteById(costTableId);}
}

================
File: src/main/java/com/radical/be_radicalcare/Services/CustomerService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.Customer;
import com.radical.be_radicalcare.Entities.User;
import com.radical.be_radicalcare.Repositories.ICustomerRepository;
import com.radical.be_radicalcare.Repositories.IUserRepository;
import com.radical.be_radicalcare.ViewModels.CustomerPostVm;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Optional;
@Slf4j
@Service
@RequiredArgsConstructor
public class CustomerService {

    private final ICustomerRepository customerRepository;
    private final IUserRepository userRepository;

    public Optional<Customer> getCustomerByUserId(String userId) {
        return customerRepository.findByUserId_Id(userId);
    }
    public void updateCustomer(Customer customer) {
        customerRepository.save(customer);  // Lưu thông tin khách hàng
    }

    public void saveOrUpdateCustomer(String userId, CustomerPostVm customerPostVm) {
        log.info("Saving customer with dateOfBirth: {}", customerPostVm.doB());

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Customer customer = customerRepository.findByUserId_Id(userId)
                .orElse(new Customer());

        customer.setUserId(user);
        customer.setFullName(customerPostVm.fullName());
        customer.setDoB(customerPostVm.doB());
        customer.setAddress(customerPostVm.address());
        customer.setPhoneNumber(customerPostVm.phoneNumber());

        customerRepository.save(customer);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/EmailService.java
================
package com.radical.be_radicalcare.Services;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

@Service
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    public void sendMail(String to, String subject, String token) throws MessagingException {
        MimeMessage message = mailSender.createMimeMessage();

        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
        helper.setTo(to);
        helper.setSubject(subject);
        helper.setFrom("noreply@demomailtrap.com");

        String htmlContent = "<html>"
                + "<head>"
                + "<meta charset='UTF-8'>"
                + "<style>"
                + "  body { font-family: Arial, sans-serif; color: #333; }"
                + "  .container { background-color: #f7f7f7; padding: 20px; }"
                + "  .content { max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 20px; border-radius: 8px; }"
                + "  .button { display: inline-block; background-color: #EF5B25; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin-top: 20px; }"
                + "  .footer { font-size: 14px; color: #888888; margin-top: 30px; }"
                + "</style>"
                + "</head>"
                + "<body>"
                + "  <div class='container'>"
                + "    <div class='content'>"
                + "      <h2 style='color: #EF5B25;'>Xin chào,</h2>"
                + "      <p style='font-size: 16px;'>Chúng tôi đã nhận được yêu cầu đặt lại mật khẩu. Vui lòng nhấn vào liên kết bên dưới để đặt lại mật khẩu:</p>"
                + "      <a href='http://localhost:8080/api/v1/reset-password/shown?token=" + token + "' class='button'>Đặt lại mật khẩu</a>"
                + "      <p style='font-size: 16px;'>Nếu bạn không yêu cầu đặt lại mật khẩu, vui lòng bỏ qua email này.</p>"
                + "      <p class='footer'>Nếu bạn có bất kỳ câu hỏi nào, vui lòng liên hệ với đội hỗ trợ của chúng tôi.</p>"
                + "    </div>"
                + "  </div>"
                + "</body>"
                + "</html>";

        helper.setText(htmlContent, true);

        mailSender.send(message);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/FilterService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Specifications.VehicleSpecification;
import com.radical.be_radicalcare.ViewModels.FilterGetVm;
import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Repositories.IVehicleRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class FilterService {
    private final IVehicleRepository vehicleRepository;

    public List<FilterGetVm> filterVehicles(
            List<String> segments, List<String> colors, Boolean sold,
            List<Integer> categoryIds, Double minCost, Double maxCost) {

        Specification<Vehicle> spec = Specification
                .where(VehicleSpecification.hasSegmentIn(segments))
                .and(VehicleSpecification.hasColorIn(colors))
                .and(VehicleSpecification.isSold(sold))
                .and(VehicleSpecification.hasCategoryIdIn(categoryIds))
                .and(VehicleSpecification.hasCostBetween(minCost, maxCost));

        List<Vehicle> vehicles = vehicleRepository.findAll(spec);

        return vehicles.stream()
                .map(FilterGetVm::from)
                .collect(Collectors.toList());
    }

    // Trả về các segment duy nhất từ danh sách các phương tiện
    public Set<String> getUniqueSegments() {
        List<Vehicle> allVehicles = vehicleRepository.findAll();
        return allVehicles.stream()
                .map(Vehicle::getSegment)
                .filter(segment -> segment != null && !segment.isEmpty())
                .collect(Collectors.toSet());
    }

    // Trả về các màu duy nhất từ danh sách các phương tiện
    public Set<String> getUniqueColors() {
        List<Vehicle> allVehicles = vehicleRepository.findAll();
        return allVehicles.stream()
                .map(Vehicle::getColor)
                .filter(color -> color != null && !color.isEmpty())
                .collect(Collectors.toSet());
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/GpsLocationService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.GpsLocation;
import com.radical.be_radicalcare.Repositories.IGpsLocationRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class GpsLocationService {

    private final IGpsLocationRepository gpsLocationRepository;

    public void saveGpsLocation(GpsLocation gpsLocation) {
        gpsLocationRepository.save(gpsLocation);
    }

    public GpsLocation getGpsLocationByUserId(String userId) {
        return gpsLocationRepository.findFirstByUserId_IdOrderByTimestampDesc(userId);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/JwtTokenProvider.java
================
package com.radical.be_radicalcare.Services;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Date;
import java.util.List;

@Component
@Slf4j
public class JwtTokenProvider {

//    private final Key signingKey = Keys.secretKeyFor(SignatureAlgorithm.HS512);
//
//    public String generateToken(Authentication authentication, String userId) {
//        String username = authentication.getName();
//        List<String> authorities = authentication.getAuthorities().stream()
//                .map(GrantedAuthority::getAuthority)
//                .toList();
//
//        Date now = new Date();
//        int jwtExpirationInMs = 604800000;
//        Date expiryDate = new Date(now.getTime() + jwtExpirationInMs);
//
//        return Jwts.builder()
//                .setSubject(username)
//                .claim("userId", userId)
//                .claim("authorities", authorities)
//                .setIssuedAt(now)
//                .setExpiration(expiryDate)
//                .signWith(signingKey)
//                .compact();
//    }
    private final Key signingKey;  // Khóa mã hóa JWT

    public JwtTokenProvider(@Value("${jwt.secret}") String secret) {
        this.signingKey = Keys.hmacShaKeyFor(secret.getBytes(StandardCharsets.UTF_8));
    }

    public String generateToken(Authentication authentication, String userId, String customerId) {
        String username = authentication.getName();
        List<String> authorities = authentication.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .toList();

        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + 604800000);

        return Jwts.builder()
                .setSubject(username)
                .claim("userId", userId)
                .claim("customerId", customerId)
                .claim("authorities", authorities)
                .setIssuedAt(now)
                .setExpiration(expiryDate)
                .signWith(signingKey)
                .compact();
    }

    public boolean validateToken(String authToken) {
        try {
            Jwts.parserBuilder().setSigningKey(signingKey).build().parseClaimsJws(authToken);
            log.info("JWT token is valid.");
            return true;
        } catch (MalformedJwtException ex) {
            log.error("Invalid JWT token: {}", ex.getMessage());
        } catch (ExpiredJwtException ex) {
            log.error("Expired JWT token: {}", ex.getMessage());
        } catch (UnsupportedJwtException ex) {
            log.error("Unsupported JWT token: {}", ex.getMessage());
        } catch (IllegalArgumentException ex) {
            log.error("JWT token claims string is empty: {}", ex.getMessage());
        } catch (Exception ex) {
            log.error("Error while validating JWT: {}", ex.getMessage());
        }
        return false;
    }

    public String getUsernameFromJWT(String token) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
        return claims.getSubject();
    }

    public String getUserIdFromJWT(String token) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
        return claims.get("userId", String.class);
    }

    public String getCustomerIdFromJWT(String token) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
        return claims.get("customerId", String.class);
    }

    public List<String> getRolesFromToken(String token) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(signingKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
        return claims.get("authorities", List.class);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/MessageService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.Message;
import com.radical.be_radicalcare.Repositories.IMessageRepository;
import com.radical.be_radicalcare.ViewModels.ChatGetVm;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class MessageService {

    private final IMessageRepository messageRepository;
    private final CloudinaryService cloudinaryService;

    public Message saveMessage(String senderId, String recipientId, String content, String messageType) {
        Message message = Message.builder()
                .senderId(senderId)
                .recipientId(recipientId)
                .content(content)
                .messageType(messageType)
                .timestamp(LocalDateTime.now())
                .build();
        return messageRepository.save(message);
    }

    public List<Message> getChatHistory(String senderId, String recipientId) {
        List<Message> chatHistory = messageRepository.findBySenderIdAndRecipientIdOrderByTimestampAsc(senderId, recipientId);

        // Chuyển đổi danh sách Message sang ChatGetVm
        return chatHistory.stream()
                .map(message -> {
                    List<String> imageUrls = cloudinaryService.getImageUrlsForMessage(message.getId());
                    return ChatGetVm.fromEntity(message, imageUrls);
                })
                .toList();
    }

    public List<String> saveMessageImages(Message message, List<MultipartFile> images) {
        List<String> imageUrls = new ArrayList<>();

        for (MultipartFile image : images) {
            try {
                // Upload ảnh lên Cloudinary và lấy URL trả về
                Map<String, Object> uploadResult = cloudinaryService.upload(image);
                String imageUrl = (String) uploadResult.get("url");
                imageUrls.add(imageUrl);
            } catch (IOException e) {
                throw new RuntimeException("Failed to upload image: " + e.getMessage());
            }
        }
        return imageUrls;
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Services/MotorServicesService.java
================
package com.radical.be_radicalcare.Services;


import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Entities.MotorService;
import com.radical.be_radicalcare.Repositories.ICostTableRepository;
import com.radical.be_radicalcare.Repositories.IMotorServicesRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
public class MotorServicesService {

    private final IMotorServicesRepository motorServicesRepository;
    private final ICostTableRepository costTableRepository;
    public List<MotorService> getAllMotorServices() {
        return motorServicesRepository.findAll();
    }

    public Optional<MotorService> getMotorServiceById(Long id){
        return motorServicesRepository.findById(id);
    }

    public void addMotorService (MotorService motorService){
        motorServicesRepository.save(motorService);
    }

    public void updateMotorService(MotorService motorService){
        MotorService existingMotorService = motorServicesRepository.findById(motorService.getServiceId())
                .orElseThrow(() ->new RuntimeException("MotorService not found"));

        existingMotorService.setServiceName(motorService.getServiceName());
        existingMotorService.setServiceDescription(motorService.getServiceDescription());

        CostTable costTable = costTableRepository.findById(motorService.getCostId().getCostId())
                .orElseThrow(() -> new RuntimeException("CostID not found"));
        existingMotorService.setCostId(costTable);
    }

    public void deletedMotorServiceById(Long motorServiceId) {
        motorServicesRepository.deleteById(motorServiceId);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/OAuth2UserService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Constants.Provider;
import com.radical.be_radicalcare.Constants.RoleType;
import com.radical.be_radicalcare.Entities.User;
import com.radical.be_radicalcare.Repositories.IRoleRepository;
import com.radical.be_radicalcare.Repositories.IUserRepository;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import java.util.Set;
import java.util.UUID;

@Slf4j
@Service
public class OAuth2UserService extends DefaultOAuth2UserService {

    private final IUserRepository userRepository;
    private final IRoleRepository roleRepository;

    @Autowired
    public OAuth2UserService(IUserRepository userRepository, IRoleRepository roleRepository) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
    }

    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
        OAuth2User oAuth2User = super.loadUser(userRequest);

        String uuid = oAuth2User.getAttribute("sub");
        String email = oAuth2User.getAttribute("email");
        String fullName = oAuth2User.getAttribute("name");

        User user = userRepository.findByUsername(uuid);
        if (user == null) {
            user = new User();
            user.setUsername(uuid);
            user.setEmail(email);
            user.setFullName(fullName);
            user.setProvider(Provider.GOOGLE);
            user.setRoles(Set.of(roleRepository.findRoleById(RoleType.USER.value)));
            user.setPassword("N/A");

            userRepository.save(user);
        } else {
            log.info("User already exists with UUID: {}", uuid);
            log.info("Full Name: {}", fullName);
        }

        return oAuth2User;
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Services/OAuthService.java
================
package com.radical.be_radicalcare.Services;

import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

@Service
public class OAuthService extends DefaultOAuth2UserService {
    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
        return super.loadUser(userRequest);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/ProductService.java
================
package com.radical.be_radicalcare.Services;


import com.radical.be_radicalcare.Entities.*;
import com.radical.be_radicalcare.Repositories.ICostTableRepository;
import com.radical.be_radicalcare.Repositories.IProductImageRepository;
import com.radical.be_radicalcare.Repositories.IProductRepository;
import com.radical.be_radicalcare.ViewModels.ProductPostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
@RequiredArgsConstructor
public class ProductService {
    private final ICostTableRepository costTableRepository;
    private final IProductRepository productRepository;
    private final CloudinaryService cloudinaryService;
    private final IProductImageRepository productImageRepository;

    public Page<Product> getAllProducts(int page, int size, String sortBy) {
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));
        return productRepository.findAll(pageable);
    }

    public Optional<Product> getProductById(Long productId) {

        return productRepository.findById(productId);
    }

    public void addProduct(Product product, List<MultipartFile> images) throws IOException {
        Product savedProduct = productRepository.save(product);

        if (product.getCostTable() != null && product.getCostTable().getCostId() != null) {
            CostTable costTable = costTableRepository.findById(product.getCostTable().getCostId()).orElse(null);
            product.setCostTable(costTable);
        }

        saveImages(images, savedProduct);
    }

    private void saveImages(List<MultipartFile> images, Product savedProduct) throws IOException {
        for (MultipartFile image : images) {
            Map uploadResult = cloudinaryService.upload(image);
            String imageUrl = (String) uploadResult.get("url");
            ProductImage productImage = new ProductImage();
            productImage.setImageUrl(imageUrl);
            productImage.setProductId(savedProduct);
            productImageRepository.save(productImage);
        }
    }

    public void updateProduct(Long productId, ProductPostVm productPostVm, List<MultipartFile> newImages) throws IOException {
        Product existingProduct = productRepository.findById(productId).orElseThrow(() -> new ResourceNotFoundException("Product not found"));

        existingProduct.setName(productPostVm.name());
        existingProduct.setDescription(productPostVm.description());
        existingProduct.setBrand(productPostVm.brand());

        if (productPostVm.costId() != null) {
            CostTable costTable = costTableRepository.findById(productPostVm.costId()).orElse(null);
            existingProduct.setCostTable(costTable);
        }

        List<ProductImage> existingImages = productImageRepository.findByProductId(existingProduct.getId());

        for (ProductImage existingImage : existingImages) {
            cloudinaryService.delete(existingImage.getImageUrl());
            productImageRepository.delete(existingImage);
        }

        saveImages(newImages, existingProduct);

        productRepository.save(existingProduct);
    }


    public void deleteProduct(Long productId) {
        Product product = productRepository.findById(productId).orElseThrow(() -> new ResourceNotFoundException("Product not found"));

        List<ProductImage> images = productImageRepository.findByProductId(product.getId());

        for (ProductImage image : images) {
            cloudinaryService.delete(image.getImageUrl());
            productImageRepository.delete(image);
        }

        productRepository.delete(product);
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Services/RecentSearchService.java
================
package com.radical.be_radicalcare.Services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.List;

@Service
public class RecentSearchService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    private static final String CACHE_PREFIX = "recent_search:";
    private static final int MAX_HISTORY_SIZE = 20; // Giới hạn số lượng lịch sử tìm kiếm

    // Lưu tìm kiếm
    public void saveSearch(String userId, String searchText) {
        // Kiểm tra userId hợp lệ
        if (userId == null || userId.trim().isEmpty()) {
            throw new IllegalArgumentException("Invalid userId: userId must not be null or empty");
        }

        String key = CACHE_PREFIX + userId;

        // Kiểm tra xem từ khóa đã tồn tại hay chưa
        List<Object> existingSearches = redisTemplate.opsForList().range(key, 0, -1);
        if (existingSearches != null && existingSearches.contains(searchText)) {
            // Nếu tồn tại, xóa từ khóa cũ
            redisTemplate.opsForList().remove(key, 1, searchText);
        }

        // Thêm từ khóa mới vào đầu danh sách
        redisTemplate.opsForList().leftPush(key, searchText);

        // Giới hạn số lượng lịch sử tìm kiếm
        redisTemplate.opsForList().trim(key, 0, MAX_HISTORY_SIZE - 1);

        // Đặt TTL cho key
        redisTemplate.expire(key, Duration.ofDays(7));
    }

    // Lấy danh sách tìm kiếm gần đây
    public List<Object> getRecentSearches(String userId) {
        String key = CACHE_PREFIX + userId;
        return redisTemplate.opsForList().range(key, 0, -1); // Lấy toàn bộ danh sách từ Redis
    }

    // Xóa lịch sử tìm kiếm
    public void deleteRecentSearches(String userId) {
        String key = CACHE_PREFIX + userId;
        redisTemplate.delete(key); // Xóa key khỏi Redis
    }

    // Xóa một tìm kiếm cụ thể
    public void deleteSpecificSearch(String userId, String searchText) {
        String key = CACHE_PREFIX + userId;
        redisTemplate.opsForList().remove(key, 1, searchText); // Xóa một mục khớp với searchText
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/SearchService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.MotorService;
import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Repositories.IMotorServicesRepository;
import com.radical.be_radicalcare.Repositories.IVehicleRepository;
import com.radical.be_radicalcare.Services.CategoryService;
import com.radical.be_radicalcare.Specifications.VehicleSpecification;
import com.radical.be_radicalcare.ViewModels.SearchVehicleGetVm;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class SearchService {
    private final IVehicleRepository vehicleRepository;
    private final IMotorServicesRepository motorServicesRepository; // Nếu bạn dùng motor services
    private final CategoryService categoryService;

    // Tìm kiếm Vehicle theo keyword và các tiêu chí lọc
    public Page<SearchVehicleGetVm> searchVehicles(
            Specification<Vehicle> spec,
            int page,
            int size,
            String sortBy
    ) {
        // Tìm kiếm với phân trang và sắp xếp
        Page<Vehicle> vehicles = vehicleRepository.findAll(
                spec, PageRequest.of(page, size, Sort.by(sortBy))
        );

        // Ánh xạ từ Vehicle sang SearchGetVm
        return vehicles.map(SearchVehicleGetVm::fromVehicleEntity);
    }

    // Tìm kiếm Vehicle chỉ với keyword
    public List<SearchVehicleGetVm> searchVehiclesByKeyword(String keyword) {
        Specification<Vehicle> spec = Specification.where(
                VehicleSpecification.hasKeyword(keyword, categoryService)
        );

        List<Vehicle> vehicles = vehicleRepository.findAll(spec);

        return vehicles.stream()
                .map(SearchVehicleGetVm::fromVehicleEntity)
                .toList();
    }

    // (Nếu cần) Tìm kiếm MotorService theo keyword hoặc các tiêu chí lọc khác
//    public Page<SearchVehicleGetVm> searchMotorServices(
//            Specification<MotorService> spec,
//            int page,
//            int size,
//            String sortBy
//    ) {
//        Page<MotorService> motorServices = motorServicesRepository.findAll(
//                spec, PageRequest.of(page, size, Sort.by(sortBy))
//        );
//
//        return motorServices.map(SearchVehicleGetVm::fromMotorServiceEntity);
//    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/SupplierService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.Supplier;
import com.radical.be_radicalcare.Repositories.ISupplierRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
@RequiredArgsConstructor
public class SupplierService {
    private final ISupplierRepository supplierRepository;

    public List<Supplier> getAllSuppliers() {
        return supplierRepository.findAll();
    }

    public Optional<Supplier> getSupplierById(Long supplierId) {
        return supplierRepository.findById(supplierId);
    }

    public void addSupplier(Supplier supplier) {
        supplierRepository.save(supplier);
    }

    public void updateSupplier(Supplier supplier) {
        Supplier existingSupplier = supplierRepository.findById(supplier.getSupplierId()).orElse(null);
        assert existingSupplier != null;
        existingSupplier.setSupplierName(supplier.getSupplierName());
        existingSupplier.setSupplierAddress(supplier.getSupplierAddress());
        existingSupplier.setSupplierPhone(supplier.getSupplierPhone());
        existingSupplier.setSupplierEmail(supplier.getSupplierEmail());
        supplierRepository.save(existingSupplier);
    }

    public void deleteSupplierById(Long supplierId) {
        supplierRepository.deleteById(supplierId);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Services/UserService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Constants.Provider;
import com.radical.be_radicalcare.Constants.RoleType;
import com.radical.be_radicalcare.Controllers.AuthController;
import com.radical.be_radicalcare.Dto.RegisterRequest;
import com.radical.be_radicalcare.Entities.Customer;
import com.radical.be_radicalcare.Entities.Role;
import com.radical.be_radicalcare.Entities.User;
import com.radical.be_radicalcare.Repositories.ICustomerRepository;
import com.radical.be_radicalcare.Repositories.IRoleRepository;
import com.radical.be_radicalcare.Repositories.IUserRepository;
import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
public class UserService implements UserDetailsService {

    private final IUserRepository userRepository;
    private final ICustomerRepository customerRepository;

    private final IRoleRepository roleRepository;
    private final EmailService emailService;

    public void registerUser(RegisterRequest registerRequest) {
        // Tạo đối tượng User và ánh xạ dữ liệu từ RegisterRequest
        var user = new User();
        user.setUsername(registerRequest.getUsername());
        user.setPassword(new BCryptPasswordEncoder().encode(registerRequest.getPassword()));
        user.setEmail(registerRequest.getEmail());
        user.setProvider(Provider.LOCAL);
        user.setFullName(registerRequest.getFullName()); // Ánh xạ fullname
        user.setPhone(registerRequest.getPhoneNumber()); // Ánh xạ phone
        user.setRoles(Set.of(roleRepository.findRoleById(RoleType.USER.value)));

        // Lưu user vào cơ sở dữ liệu
        userRepository.save(user);

        // Tạo đối tượng Customer và ánh xạ dữ liệu từ RegisterRequest
        var customer = new Customer();
        customer.setFullName(registerRequest.getFullName());
        customer.setPhoneNumber(registerRequest.getPhoneNumber());
        customer.setAddress(registerRequest.getAddress());
        customer.setDoB(registerRequest.getDoB());
        customer.setUserId(user);

        // Lưu customer vào cơ sở dữ liệu
        customerRepository.save(customer);
    }

    public boolean existsByUsername(String username) {
        return userRepository.findByUsername(username) != null;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        var user = userRepository.findByUsername(username);
        if (user == null) {
            throw new UsernameNotFoundException("User not found with username: " + username);
        }

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .authorities(user.getAuthorities())
                .accountExpired(false)
                .accountLocked(false)
                .credentialsExpired(false)
                .disabled(false)
                .build();
    }

    public Optional<User> findByUsername(String username) {
        return Optional.ofNullable(userRepository.findByUsername(username));
    }

    public void updateUser(User user) {
        userRepository.save(user);  // Lưu thông tin người dùng
    }

    public void forgotPassWord(String email) {
        var user = userRepository.findByEmail(email);
        if (user == null) {
            throw new UsernameNotFoundException("User not found with email: " + email);
        }

        log.info("User found with email: {}", email);

        String token = UUID.randomUUID().toString();

        // Lưu token vào user
        user.setTokenResetPassword(token);

        java.util.Date now = new java.util.Date();
        java.sql.Date expiryDate = new java.sql.Date(now.getTime() + 30 * 60 * 1000);
        user.setTokenResetPasswordExpired(expiryDate);

        userRepository.save(user);

        try {
            // Gửi token qua email
            emailService.sendMail(email, "Reset Password", token);
            log.info("Password reset email sent to {}", email);
        } catch (MessagingException e) {
            log.error("Error while sending email to {}: {}", email, e.getMessage());
            throw new RuntimeException("Error while sending password reset email", e);
        }
    }

    public void resetPassword(String token, String newPassword) {
        User user = userRepository.findByTokenResetPassword(token)
                .orElseThrow(() -> new IllegalArgumentException("Invalid token!"));

        java.sql.Date now = new java.sql.Date(System.currentTimeMillis());

        if (user.getTokenResetPasswordExpired().before(now)) {
            throw new IllegalArgumentException("Token expired!");
        }

        user.setPassword(new BCryptPasswordEncoder().encode(newPassword));
        user.setTokenResetPassword(null);
        user.setTokenResetPasswordExpired(null);
        userRepository.save(user);
    }

    public boolean isTokenValid(String token) {
        var userOptional = userRepository.findByTokenResetPassword(token);
        if (userOptional.isEmpty()) {
            return false;
        }

        User user = userOptional.get();
        return user.getTokenResetPasswordExpired() != null &&
                user.getTokenResetPasswordExpired().after(new Date()); // Token hợp lệ nếu chưa hết hạn
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Services/VehicleService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.*;
import com.radical.be_radicalcare.Repositories.IVehicleImageRepository;
import com.radical.be_radicalcare.Repositories.IVehicleRepository;
import com.radical.be_radicalcare.ViewModels.VehiclePostVm;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import org.springframework.data.domain.Pageable;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
@RequiredArgsConstructor
public class VehicleService {
    private final IVehicleRepository vehicleRepository;
    private final IVehicleImageRepository vehicleImageRepository;
    private final CloudinaryService cloudinaryService;
    private final SupplierService supplierService;
    private final CostTableService costTableService;
    private final CategoryService categoryService;

    public Page<Vehicle> searchVehicles(Specification<Vehicle> spec, int page, int size, String sortBy) {
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));
        return vehicleRepository.findAllWithRelations(spec.toString(), pageable); // Sử dụng JOIN FETCH
    }

    public Page<Vehicle> getAllVehicles(int page, int size, String sortBy) {
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));
        return vehicleRepository.findAll(pageable);
    }

    public Optional<Vehicle> getVehicleById(String chassisNumber) {
        return vehicleRepository.findByIdWithRelations(chassisNumber); // Sử dụng truy vấn tùy chỉnh
    }

    public void addVehicle(Vehicle vehicle, List<MultipartFile> images) throws IOException {
        if (vehicle.getSupplierId() != null && vehicle.getSupplierId().getSupplierId() != null) {
            Supplier supplier = supplierService.getSupplierById(vehicle.getSupplierId().getSupplierId()).orElse(null);
            vehicle.setSupplierId(supplier);
        }
        if (vehicle.getCostId() != null && vehicle.getCostId().getCostId() != null) {
            CostTable costTable = costTableService.getCostTableById(vehicle.getCostId().getCostId()).orElse(null);
            vehicle.setCostId(costTable);
        }
        if (vehicle.getCategoryId() != null && vehicle.getCategoryId().getId() != null) {
            Category category = categoryService.getCategoryById(vehicle.getCategoryId().getId()).orElse(null);
            vehicle.setCategoryId(category);
        }

        Vehicle savedVehicle = vehicleRepository.save(vehicle);

        saveImages(images, savedVehicle);
    }
    // Thêm mới method getAllVehiclesWithoutPagination
    public List<Vehicle> getAllVehiclesWithoutPagination(String sortBy) {
        return vehicleRepository.findAll(Sort.by(sortBy));
    }


    public void updateVehicle(String chassisNumber, VehiclePostVm vehiclePostVm, List<MultipartFile> newImages) throws IOException {
        Vehicle vehicle = vehicleRepository.findById(chassisNumber).orElseThrow(() -> new ResourceNotFoundException("Vehicle not found"));

        vehicle.setChassisNumber(vehiclePostVm.chassisNumber());
        vehicle.setVehicleName(vehiclePostVm.vehicleName());
        vehicle.setImportDate(vehiclePostVm.importDate());
        vehicle.setVersion(vehiclePostVm.version());
        vehicle.setColor(vehiclePostVm.color());
        vehicle.setSegment(vehiclePostVm.segment());

        if (vehiclePostVm.costId() != null) {
            CostTable costTable = costTableService.getCostTableById(vehiclePostVm.costId()).orElse(null);
            vehicle.setCostId(costTable);
        }
        if (vehiclePostVm.categoryId() != null) {
            Category category = categoryService.getCategoryById(vehiclePostVm.categoryId()).orElse(null);
            vehicle.setCategoryId(category);
        }
        if (vehiclePostVm.supplierId() != null) {
            Supplier supplier = supplierService.getSupplierById(vehiclePostVm.supplierId()).orElse(null);
            vehicle.setSupplierId(supplier);
        }

        if (newImages != null && !newImages.isEmpty()) {
            List<VehicleImage> existingImages = vehicleImageRepository.findByVehicleId(vehicle.getChassisNumber());
            for (VehicleImage image : existingImages) {
                cloudinaryService.delete(image.getImageUrl());
                vehicleImageRepository.delete(image);
            }

            saveImages(newImages, vehicle);
        }

        vehicleRepository.save(vehicle);
    }

    private void saveImages(List<MultipartFile> newImages, Vehicle vehicle) throws IOException {
        for (MultipartFile newImage : newImages) {
            Map uploadResult = cloudinaryService.upload(newImage);
            String imageUrl = (String) uploadResult.get("url");
            VehicleImage vehicleImage = new VehicleImage();
            vehicleImage.setImageUrl(imageUrl);
            vehicleImage.setChassisNumber(vehicle);
            vehicleImageRepository.save(vehicleImage);
        }
    }

    public void deleteVehicle(String chassisNumber) {
        Vehicle vehicle = vehicleRepository.findById(chassisNumber).orElseThrow(() -> new ResourceNotFoundException("Vehicle not found"));

        List<VehicleImage> images = vehicleImageRepository.findByVehicleId(vehicle.getChassisNumber());

        for (VehicleImage image : images) {
            cloudinaryService.delete(image.getImageUrl());
            vehicleImageRepository.delete(image);
        }

        vehicleRepository.delete(vehicle);
    }
    public List<Vehicle> getVehiclesByIds(List<String> ids) {
        return vehicleRepository.findAllById(ids);
    }

}

================
File: src/main/java/com/radical/be_radicalcare/Services/WarrantyInfoService.java
================
package com.radical.be_radicalcare.Services;

import com.radical.be_radicalcare.Entities.WarrantyInfo;
import com.radical.be_radicalcare.Repositories.IWarrantyInfoRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional(isolation = Isolation.SERIALIZABLE, rollbackFor = {Exception.class, Throwable.class})
@RequiredArgsConstructor
public class WarrantyInfoService {
    private final IWarrantyInfoRepository warrantyInfoRepository;

    public List<WarrantyInfo> getAllWarrantyInfos() {
        return warrantyInfoRepository.findAll();
    }

    public Optional<WarrantyInfo> getWarrantyInfoById(Long warrantyInfoId) {
        return warrantyInfoRepository.findById(warrantyInfoId);
    }

    public void addWarrantyInfo(WarrantyInfo warrantyInfo) {
        warrantyInfoRepository.save(warrantyInfo);
    }

    public void updateWarrantyInfo(WarrantyInfo warrantyInfo) {
        WarrantyInfo existingWarrantyInfo = warrantyInfoRepository.findById(warrantyInfo.getId())
                .orElseThrow(() -> new RuntimeException("WarrantyInfo not found"));

        existingWarrantyInfo.setWarrantyType(warrantyInfo.getWarrantyType());
        existingWarrantyInfo.setWarrantyDescription(warrantyInfo.getWarrantyDescription());

        warrantyInfoRepository.save(existingWarrantyInfo);
    }

    public void deleteWarrantyInfoById(Long warrantyInfoId) {
        warrantyInfoRepository.deleteById(warrantyInfoId);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Specifications/MotorServicesSpecification.java
================
package com.radical.be_radicalcare.Specifications;

import com.radical.be_radicalcare.Entities.MotorService;
import org.springframework.data.jpa.domain.Specification;

public class MotorServicesSpecification {

    public static Specification<MotorService> hasKeyword(String keyword) {
        return (root, query, criteriaBuilder) -> {
            String likePattern = "%" + keyword.toLowerCase() + "%";
            return criteriaBuilder.like(criteriaBuilder.lower(root.get("name")), likePattern);
        };
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Specifications/VehicleSpecification.java
================
package com.radical.be_radicalcare.Specifications;

import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Services.CategoryService;
import org.springframework.data.jpa.domain.Specification;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import jakarta.persistence.criteria.Predicate;

public class VehicleSpecification {

    public static Specification<Vehicle> hasSegmentIn(List<String> segments) {
        return (root, query, criteriaBuilder) -> {
            if (segments == null || segments.isEmpty()) {
                return criteriaBuilder.conjunction(); // Không áp dụng điều kiện nếu segments là null hoặc rỗng
            }
            return root.get("segment").in(segments);
        };
    }

    public static Specification<Vehicle> hasColorIn(List<String> colors) {
        return (root, query, criteriaBuilder) -> {
            if (colors == null || colors.isEmpty()) {
                return criteriaBuilder.conjunction(); // Không áp dụng điều kiện nếu colors là null hoặc rỗng
            }
            return root.get("color").in(colors);
        };
    }

    public static Specification<Vehicle> isSold(Boolean sold) {
        return (root, query, criteriaBuilder) ->
                sold == null ? criteriaBuilder.conjunction() : criteriaBuilder.equal(root.get("sold"), sold);
    }

    public static Specification<Vehicle> hasCategoryIdIn(List<Integer> categoryIds) {
        return (root, query, criteriaBuilder) -> {
            if (categoryIds == null || categoryIds.isEmpty()) {
                return criteriaBuilder.conjunction();
            }
            return root.get("categoryId").get("categoryId").in(categoryIds);
        };
    }

    public static Specification<Vehicle> hasCostBetween(Double minCost, Double maxCost) {
        return (root, query, criteriaBuilder) -> {
            if (minCost != null && maxCost != null) {
                return criteriaBuilder.between(
                        root.get("costId").get("baseCost"), // Sử dụng costId để truy cập
                        minCost, maxCost
                );
            } else if (minCost != null) {
                return criteriaBuilder.greaterThanOrEqualTo(
                        root.get("costId").get("baseCost"), minCost
                );
            } else if (maxCost != null) {
                return criteriaBuilder.lessThanOrEqualTo(
                        root.get("costId").get("baseCost"), maxCost
                );
            } else {
                return criteriaBuilder.conjunction();
            }
        };
    }

    // Tìm kiếm theo cateId dành cho mục đích tìm kiếm thay vì filter
    public static Specification<Vehicle> hasKeyword(String keyword, CategoryService categoryService) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return (root, query, criteriaBuilder) -> criteriaBuilder.conjunction(); // Không áp dụng điều kiện nếu keyword null
        }

        String[] keywords = keyword.toLowerCase().split(" ");
        return (root, query, criteriaBuilder) -> {
            // Lấy ID danh mục tương ứng với từ khóa
            List<Long> categoryIds = categoryService.getCategoryIdsByName(keyword);

            // Tạo các điều kiện cho các thuộc tính của Vehicle
            List<Predicate> predicates = Arrays.stream(keywords)
                    .flatMap(word -> Stream.of(
                            criteriaBuilder.like(criteriaBuilder.lower(root.get("vehicleName")), "%" + word + "%"),
                            criteriaBuilder.like(criteriaBuilder.lower(root.get("color")), "%" + word + "%"),
                            criteriaBuilder.like(criteriaBuilder.lower(root.get("segment")), "%" + word + "%"),
                            criteriaBuilder.like(criteriaBuilder.lower(root.get("version")), "%" + word + "%"),
                            criteriaBuilder.like(
                                    criteriaBuilder.lower(root.join("costId").get("baseCost").as(String.class)), // Tìm kiếm baseCost
                                    "%" + word + "%"
                            )
                    ))
                    .collect(Collectors.toList());

            // Nếu có danh sách ID danh mục, thêm điều kiện tìm kiếm theo danh mục
            if (!categoryIds.isEmpty()) {
                predicates.add(root.get("categoryId").get("id").in(categoryIds));
            }

            // Trả về các điều kiện kết hợp
            return criteriaBuilder.or(predicates.toArray(new Predicate[0])); // Sử dụng 'or' để tìm kiếm
        };
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/CorsConfig.java
================
package com.radical.be_radicalcare.Utils;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:8080", "http://192.168.1.33:8080","http://192.168.101.62:8080", "http://10.0.2.2:8080")
                .allowedMethods("GET", "POST", "PUT", "DELETE")
                .allowCredentials(true);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/JacksonConfig.java
================
package com.radical.be_radicalcare.Utils;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.hibernate6.Hibernate6Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class JacksonConfig {

    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());
        objectMapper.registerModule(new Hibernate6Module()); // Xử lý proxy Hibernate
        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); // Ngăn lỗi "Empty Beans"
        return objectMapper;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/JwtAuthenticationFilter.java
================
package com.radical.be_radicalcare.Utils;

import com.radical.be_radicalcare.Services.JwtTokenProvider;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtTokenProvider;

    @Autowired
    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider) {
        this.jwtTokenProvider = jwtTokenProvider;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String requestURI = request.getRequestURI();
        String token = request.getHeader("Authorization");

        // Bỏ qua filter cho các endpoint không yêu cầu xác thực
        if (requestURI.equals("/api/v1/auth/register") ||
                requestURI.equals("/api/v1/auth/login") ||
                requestURI.equals("/api/v1/auth/forgot-password") ||
                requestURI.equals("/api/v1/login/oauth2/code/google")) {
            filterChain.doFilter(request, response);
            return;
        }

        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7); // Bỏ tiền tố "Bearer "

            if (jwtTokenProvider.validateToken(token)) {
                String username = jwtTokenProvider.getUsernameFromJWT(token);

                String userId = jwtTokenProvider.getUserIdFromJWT(token);

                // Lấy authorities từ token
                List<String> roles = jwtTokenProvider.getRolesFromToken(token);

                List<SimpleGrantedAuthority> authorities = roles.stream()
                        .map(SimpleGrantedAuthority::new)
                        .collect(Collectors.toList());

                // Tạo đối tượng xác thực
                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(username, null, authorities);
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // Gán thông tin xác thực vào SecurityContext
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }

        // Tiếp tục chuỗi filter
        filterChain.doFilter(request, response);
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/RedisConfig.java
================
package com.radical.be_radicalcare.Utils;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.datatype.hibernate6.Hibernate6Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig {

    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);

        // Cấu hình ObjectMapper tùy chỉnh
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.activateDefaultTyping(
                LaissezFaireSubTypeValidator.instance,
                ObjectMapper.DefaultTyping.NON_FINAL,
                JsonTypeInfo.As.PROPERTY
        );
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        objectMapper.registerModule(new JavaTimeModule()); // Hỗ trợ kiểu LocalDateTime, LocalDate
        objectMapper.registerModule(new Hibernate6Module()); // Xử lý proxy Hibernate

        // Sử dụng GenericJackson2JsonRedisSerializer với ObjectMapper tùy chỉnh
        GenericJackson2JsonRedisSerializer serializer = new GenericJackson2JsonRedisSerializer(objectMapper);

        // Đặt serializer cho RedisTemplate
        template.setValueSerializer(serializer);
        template.setKeySerializer(new StringRedisSerializer());
        template.afterPropertiesSet();
        return template;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/SecurityConfig.java
================
package com.radical.be_radicalcare.Utils;

import com.radical.be_radicalcare.Services.OAuthService;
import com.radical.be_radicalcare.Services.UserService;
import io.github.cdimascio.dotenv.Dotenv;
import jakarta.validation.constraints.NotNull;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)
@RequiredArgsConstructor
public class SecurityConfig {

    private final OAuthService oAuthService;
    private final UserService userService;
    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    private final Dotenv dotenv = Dotenv.load();

    @Bean
    public ClientRegistrationRepository clientRegistrationRepository() {
        String clientId = dotenv.get("OAUTH2_GOOGLE_CLIENT_ID");
        String clientSecret = dotenv.get("OAUTH2_GOOGLE_CLIENT_SECRET");

        ClientRegistration googleClientRegistration = ClientRegistration.withRegistrationId("google")
                .clientId(clientId)
                .clientSecret(clientSecret)
                .scope("profile", "email")
                .authorizationUri("https://accounts.google.com/o/oauth2/auth")
                .tokenUri("https://oauth2.googleapis.com/token")
                .userInfoUri("https://www.googleapis.com/oauth2/v3/userinfo")
                .userNameAttributeName("sub")
                .redirectUri("http://192.168.1.33:8080/login/oauth2/code/google")
                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
                .build();

        return new InMemoryClientRegistrationRepository(googleClientRegistration);
    }

    @Bean
    public UserDetailsService userDetailsService() {
        return userService;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        var auth = new DaoAuthenticationProvider();
        auth.setUserDetailsService(userDetailsService());
        auth.setPasswordEncoder(passwordEncoder());
        return auth;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(@NotNull HttpSecurity http) throws Exception {
        return http
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)
                .csrf(AbstractHttpConfigurer::disable) // Tắt CSRF
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/v1/auth/register", "/api/v1/auth/login").permitAll()
                        .requestMatchers("/api/v1/auth/forgot-password").permitAll()
                        .requestMatchers(HttpMethod.POST, "/api/v1/auth/register").permitAll()
                        .requestMatchers(HttpMethod.POST, "/api/v1/auth/reset-password").permitAll()
                        .requestMatchers(HttpMethod.GET, "/api/v1/reset-password/shown").permitAll()
                        .requestMatchers(HttpMethod.GET, "/api/v1/category").hasAnyAuthority("USER", "ADMIN")
                        .requestMatchers(HttpMethod.POST, "/api/v1/products").hasAuthority("ADMIN")
                        .requestMatchers(HttpMethod.PUT, "/api/v1/products/**").hasAuthority("ADMIN")
                        .requestMatchers(HttpMethod.GET, "/api/v1/products").permitAll()
                        .requestMatchers(HttpMethod.DELETE, "/api/v1/orders/**").hasAuthority("ADMIN")
                        .requestMatchers(HttpMethod.GET, "/api/v1/orders").hasAnyAuthority("USER", "ADMIN")
                        .anyRequest().authenticated()
                )
                .logout(logout -> logout
                        .logoutUrl("/logout")
                        .logoutSuccessUrl("/login")
                        .deleteCookies("JSESSIONID")
                        .invalidateHttpSession(true)
                        .clearAuthentication(true)
                        .permitAll()
                )
                .formLogin(withDefaults())
                .oauth2Login(withDefaults())
                .rememberMe(rememberMe -> rememberMe
                        .key("radical")
                        .rememberMeCookieName("radical")
                        .tokenValiditySeconds(24 * 60 * 60)
                        .userDetailsService(userDetailsService())
                )
                .exceptionHandling(exceptionHandling ->
                        exceptionHandling.accessDeniedPage("/403")
                )
                .sessionManagement(sessionManagement ->
                        sessionManagement.maximumSessions(1).expiredUrl("/login")
                )
                .httpBasic(httpBasic ->
                        httpBasic.realmName("radical")
                )
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/SpringEmailConfig.java
================
package com.radical.be_radicalcare.Utils;

import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;

import java.util.Objects;
import java.util.Properties;

@Configuration
public class SpringEmailConfig {

    @Bean
    public JavaMailSender javaMailSender() {
        Dotenv dotenv = Dotenv.configure().load();

        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost(dotenv.get("MAIL_HOST"));
        mailSender.setPort(Integer.parseInt(Objects.requireNonNull(dotenv.get("MAIL_PORT"))));
        mailSender.setUsername(dotenv.get("MAIL_USERNAME"));
        mailSender.setPassword(dotenv.get("MAIL_PASSWORD"));

        Properties props = mailSender.getJavaMailProperties();
        props.put("mail.transport.protocol", "smtp");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");

        return mailSender;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Utils/WebSocketConfig.java
================
package com.radical.be_radicalcare.Utils;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic"); // Topic để nhận tin nhắn từ server
        config.setApplicationDestinationPrefixes("/app"); // Prefix để gửi tin nhắn tới server
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws-chat")
                .setAllowedOrigins("*") // Hỗ trợ CORS
                .withSockJS(); // Fallback cho trình duyệt không hỗ trợ WebSocket
    }
}

================
File: src/main/java/com/radical/be_radicalcare/Validator/Annotation/ValidUsername.java
================
package com.radical.be_radicalcare.Validator.Annotation;

import com.radical.be_radicalcare.Validator.ValidUsernameValidator;
import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Constraint(validatedBy = ValidUsernameValidator.class)
@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE })
@Retention(RetentionPolicy.RUNTIME)
public @interface ValidUsername {
    String message() default "Username already exists";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

================
File: src/main/java/com/radical/be_radicalcare/Validator/ValidUsernameValidator.java
================
package com.radical.be_radicalcare.Validator;

import com.radical.be_radicalcare.Validator.Annotation.ValidUsername;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

public class ValidUsernameValidator implements ConstraintValidator<ValidUsername, String> {
    public ValidUsernameValidator() {
    }

    @Override
    public void initialize(ValidUsername constraintAnnotation) {
    }

    @Override
    public boolean isValid(String username, ConstraintValidatorContext context) {
        return username != null && !username.isEmpty() && username.matches("[a-zA-Z0-9_]+");
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/AppointmentDetailGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.AppointmentDetail;
import lombok.Builder;

import java.time.LocalDate;

@Builder
public record AppointmentDetailGetVm(
        Long id,
        String serviceName,
        Double serviceCost,
        String serviceDescription,
        LocalDate serviceDate) {

    public static AppointmentDetailGetVm fromEntity(AppointmentDetail detail) {
        return AppointmentDetailGetVm.builder()
                .id(detail.getId())
                .serviceName(detail.getMotorService().getServiceName())
                .serviceCost(detail.getMotorService().getCostId().getBaseCost())
                .serviceDescription(detail.getDescription())
                .serviceDate(detail.getServiceDate())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/AppointmentGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Appointment;
import lombok.Builder;
import lombok.Data;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

@Builder
public record AppointmentGetVm(
        Long id,
        String customerId,
        String status,
        LocalDate dateCreated,
        List<AppointmentDetailGetVm> details) {

    public static AppointmentGetVm fromEntity(Appointment appointment) {
        return AppointmentGetVm.builder()
                .id(appointment.getId())
                .customerId(appointment.getCustomer().getId())
                .status(appointment.getStatus())
                .dateCreated(appointment.getDateCreated())
                .details(appointment.getAppointmentDetails().stream()
                        .map(AppointmentDetailGetVm::fromEntity) // Chuyển đổi chi tiết
                        .collect(Collectors.toList()))
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/AppointmentPostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Appointment;
import com.radical.be_radicalcare.Entities.Customer;
import lombok.Builder;

import java.time.LocalDate;
import java.util.List;

@Builder
public record AppointmentPostVm(
        LocalDate dateCreated,
        String status,
        String customerId,
        List<Long> serviceIds,
        List<LocalDate> serviceDates, // Thêm danh sách ngày dịch vụ
        Double totalAmount
) {
    public Appointment toEntity() {
        Appointment appointment = new Appointment();
        appointment.setDateCreated(this.dateCreated);
        appointment.setStatus(this.status);
        appointment.setTotalAmount(this.totalAmount);

        if (this.customerId != null) {
            Customer customer = new Customer();
            customer.setId(this.customerId);
            appointment.setCustomer(customer);
        }

        return appointment;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CartGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Cart;
import lombok.Builder;

import java.util.List;
import java.util.stream.Collectors;

@Builder
public record CartGetVm(
        String id,
        String userId,
        Double totalCost,
        List<CartItemGetVm> items
) {
    public static CartGetVm fromEntity(Cart cart, List<CartItemGetVm> cartItems) {
        return CartGetVm.builder()
                .id(cart.getId())
                .userId(cart.getUserId())
                .totalCost(cart.getTotalCost())
                .items(cartItems)
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CartItemGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.CartItem;
import lombok.Builder;

@Builder
public record CartItemGetVm(
        String id,
        VehicleDtoGetVm vehicle, // Sử dụng VehicleDtoGetVm thay vì VehicleGetVm
        String userId,
        Integer quantity,
        Double price,
        Double subtotal
) {
    public static CartItemGetVm from(CartItem cartItem) {
        return CartItemGetVm.builder()
                .id(cartItem.getId())
                .vehicle(VehicleDtoGetVm.fromDto(cartItem.getVehicleDto())) // Sử dụng fromDto
                .userId(cartItem.getCart().getUserId())
                .quantity(cartItem.getQuantity())
                .price(cartItem.getPrice())
                .subtotal(cartItem.getSubtotal())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CategoryGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Category;
import lombok.Builder;

@Builder
public record CategoryGetVm(Long id, String name, Long warrantyInfoId) {
    public static CategoryGetVm from(Category category) {
        return CategoryGetVm.builder()
                .id(category.getId())
                .name(category.getCategoryName())
                .warrantyInfoId(category.getWarrantyInfo() != null ? category.getWarrantyInfo().getId() : null)
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CategoryPostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Category;
import com.radical.be_radicalcare.Entities.WarrantyInfo;
import lombok.Builder;

@Builder
public record CategoryPostVm(String name, Long warrantyInfoId) {
    public Category toCategory() {
        Category category = new Category();
        category.setCategoryName(this.name);
        category.setIsDeleted(false);

        WarrantyInfo warrantyInfo = new WarrantyInfo();
        warrantyInfo.setId(this.warrantyInfoId);
        category.setWarrantyInfo(warrantyInfo);

        return category;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/ChatGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Message;
import lombok.Builder;

import java.time.LocalDateTime;
import java.util.List;

@Builder
public record ChatGetVm(
        Long id,                  // ID của tin nhắn
        String senderId,          // ID của người gửi
        String recipientId,       // ID của người nhận
        String content,           // Nội dung tin nhắn
        String messageType,       // Loại tin nhắn (TEXT, IMAGE, v.v.)
        LocalDateTime timestamp,  // Thời gian gửi tin nhắn
        List<String> uploadedImages // Danh sách URL ảnh đã upload lên Cloudinary
) {
    // Tạo ChatGetVm từ Entity Message
    public static ChatGetVm fromEntity(Message message, List<String> uploadedImages) {
        return ChatGetVm.builder()
                .id(message.getId())
                .senderId(message.getSenderId())
                .recipientId(message.getRecipientId())
                .content(message.getContent())
                .messageType(message.getMessageType())
                .timestamp(message.getTimestamp())
                .uploadedImages(uploadedImages) // Nhận danh sách URL ảnh từ Cloudinary
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CostTableGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.CostTable;
import lombok.Builder;

import java.time.LocalDate;

@Builder
public record CostTableGetVm(Long costId, LocalDate dateCreate, Double baseCost, Boolean isDeleted) {
    public static CostTableGetVm from(CostTable costTable){
        return CostTableGetVm.builder()
                .costId(costTable.getCostId())
                .dateCreate(costTable.getDateCreated())
                .baseCost(costTable.getBaseCost())
                .isDeleted(costTable.getIsDeleted())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CostTablePostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.CostTable;
import lombok.Builder;

import java.time.LocalDate;

@Builder
public record CostTablePostVm(Double baseCost, LocalDate dateCreate) {
    public CostTable toCostTable (){
        CostTable costTable = new CostTable();
        costTable.setBaseCost(this.baseCost);
        costTable.setDateCreated(this.dateCreate);
        costTable.setIsDeleted(false);
        return costTable;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CustomerGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Category;
import com.radical.be_radicalcare.Entities.Customer;
import lombok.Builder;
import lombok.Getter;

import java.time.LocalDate;

@Builder
public record CustomerGetVm(
        String id,
        String fullName,
        LocalDate doB,
        String address,
        String phoneNumber
) {
    public static CustomerGetVm fromEntity(Customer customer) {
        return CustomerGetVm.builder()
                .id(customer.getId())
                .fullName(customer.getFullName())
                .doB(customer.getDoB())
                .address(customer.getAddress())
                .phoneNumber(customer.getPhoneNumber())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/CustomerPostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Entities.Customer;
import com.radical.be_radicalcare.Entities.MotorService;
import com.radical.be_radicalcare.Entities.User;
import lombok.Builder;
import lombok.Data;
import lombok.Getter;

import java.time.LocalDate;

@Builder
public record CustomerPostVm(
        String fullName,
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
        LocalDate doB,
        String address,
        String phoneNumber
) {
    public Customer toCustomer(User user) {
        Customer customer = new Customer();
        customer.setFullName(this.fullName);
        customer.setDoB(this.doB);
        customer.setAddress(this.address);
        customer.setPhoneNumber(this.phoneNumber);
        customer.setUserId(user);
        return customer;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/FilterGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Vehicle;
import lombok.Builder;

import java.util.List;


@Builder
public record FilterGetVm(
        String chassisNumber,
        String vehicleName,
        String segment,
        String categoryName,
        String color,
        boolean sold,
        double cost,
        List<String> imageUrls
) {
    public static FilterGetVm from(Vehicle vehicle) {
        return FilterGetVm.builder()
                .chassisNumber(vehicle.getChassisNumber())
                .vehicleName(vehicle.getVehicleName())
                .segment(vehicle.getSegment())
                .categoryName(vehicle.getCategoryId() != null ? vehicle.getCategoryId().getCategoryName() : null)
                .color(vehicle.getColor())
                .sold(vehicle.getSold())
                .cost(vehicle.getCostId() != null ? vehicle.getCostId().getBaseCost() : 0)
                .imageUrls(vehicle.getImageUrls())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/GpsLocationGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.GpsLocation;
import lombok.Builder;

import java.time.LocalDateTime;

@Builder
public record GpsLocationGetVm(
        Long id,
        double latitude,
        double longitude,
        LocalDateTime timestamp,
        String customerId,
        String userId
) {
    public static GpsLocationGetVm from(GpsLocation gpsLocation) {
        return GpsLocationGetVm.builder()
                .id(gpsLocation.getId())
                .latitude(gpsLocation.getLatitude())
                .longitude(gpsLocation.getLongitude())
                .timestamp(gpsLocation.getTimestamp())
                .customerId(gpsLocation.getCustomer() != null ? gpsLocation.getCustomer().getId() : null)
                .userId(gpsLocation.getUser() != null ? gpsLocation.getUser().getId() : null)
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/MotorServiceGetVm.java
================
package com.radical.be_radicalcare.ViewModels;


import com.radical.be_radicalcare.Entities.MotorService;
import lombok.Builder;

@Builder
public record MotorServiceGetVm(
        Long serviceId,
        String serviceName,
        String serviceDescription,
        Boolean isDeleted,
        Long costTableId) {

    public static MotorServiceGetVm from (MotorService motorService) {
        return MotorServiceGetVm.builder()
                .serviceId(motorService.getServiceId())
                .serviceName(motorService.getServiceName())
                .serviceDescription(motorService.getServiceDescription())
                .isDeleted(motorService.getIsDeleted())
                .costTableId(motorService.getCostId() != null ? motorService.getCostId().getCostId(): null)
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/MotorServicePostVm.java
================
package com.radical.be_radicalcare.ViewModels;


import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Entities.MotorService;
import lombok.Builder;

@Builder
public record MotorServicePostVm(String name, String description, Long costId) {
    public MotorService toMotorService() {
        MotorService mts = new MotorService();
        mts.setServiceName(name);
        mts.setServiceDescription(description);
        mts.setIsDeleted(false);
        if (costId != null) {
            CostTable costTable = new CostTable();
            costTable.setCostId(this.costId);
            mts.setCostId(costTable);
        }
        return mts;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/ProductGetVm.java
================
package com.radical.be_radicalcare.ViewModels;


import com.radical.be_radicalcare.Entities.Product;
import com.radical.be_radicalcare.Entities.ProductImage;
import lombok.Builder;

import java.util.List;

@Builder
public record ProductGetVm (
        Long id,
           String name,
           String description,
           String brand,
           Long costId,
           List<String> imageUrls) {
    public static ProductGetVm from(Product product) {
        return ProductGetVm.builder()
                .id(product.getId())
                .name(product.getName())
                .description(product.getDescription())
                .brand(product.getBrand())
                .costId(product.getCostTable() != null ? product.getCostTable().getCostId() : null)
                .imageUrls(product.getProductImages() != null ?
                        product.getProductImages().stream()
                                .map(ProductImage::getImageUrl)
                                .toList() : null)
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/ProductPostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Entities.Product;
import lombok.Builder;

@Builder
public record ProductPostVm(String name, String description, String brand, Long costId) {
    public Product toProduct() {
        Product product = new Product();
        product.setName(this.name);
        product.setDescription(this.description);
        product.setBrand(this.brand);
        if (this.costId != null) {
            CostTable costTable = new CostTable();
            costTable.setCostId(this.costId);
            product.setCostTable(costTable);
        }
        return product;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/SearchServiceGetVm.java
================
//package com.radical.be_radicalcare.ViewModels;
//
//import com.radical.be_radicalcare.Entities.MotorService;
//import lombok.Builder;
//
//@Builder
//public record SearchServiceGetVm(
//        String serviceName,         // Tên dịch vụ
//        String serviceDescription,  // Mô tả dịch vụ
//        String category,            // Danh mục dịch vụ từ Category
//        Double price                // Giá dịch vụ từ CostTable
//) {
//    // Ánh xạ từ MotorService entity
//    public static SearchServiceGetVm fromMotorServiceEntity(MotorService motorService) {
//        return SearchServiceGetVm.builder()
//                .serviceName(motorService.getServiceName()) // Tên dịch vụ
//                .serviceDescription(motorService.getServiceDescription()) // Mô tả dịch vụ
//                .category(motorService.getCategoryId() != null ? motorService.getCategoryId().getCategoryName() : null)
//                .price(motorService.getCostId() != null ? motorService.getCostId().getBaseCost() : null) // Giá dịch vụ từ CostTable
//                .build();
//    }
//}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/SearchVehicleGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Vehicle;
import lombok.Builder;

import java.util.List;

@Builder
public record SearchVehicleGetVm(
        String chassisNumber,  // Số khung xe
        String vehicleName,    // Tên xe
        String version,        // Phiên bản xe
        String segment,        // Phân khúc
        String color,          // Màu sắc
        List<String> imageUrls,// Danh sách URL hình ảnh
        Double cost,           // Giá xe từ CostTable
        String category        // Danh mục xe từ Category
) {
    // Ánh xạ từ Vehicle entity
    public static SearchVehicleGetVm fromVehicleEntity(Vehicle vehicle) {
        return SearchVehicleGetVm.builder()
                .chassisNumber(vehicle.getChassisNumber())
                .vehicleName(vehicle.getVehicleName())
                .version(vehicle.getVersion())
                .segment(vehicle.getSegment())
                .color(vehicle.getColor())
                .imageUrls(vehicle.getImageUrls() != null ? vehicle.getImageUrls() : null)
                .cost(vehicle.getCostId() != null ? vehicle.getCostId().getBaseCost() : null)
                .category(vehicle.getCategoryId() != null ? vehicle.getCategoryId().getCategoryName() : null)
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/SupplierGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Supplier;
import lombok.Builder;

@Builder
public record SupplierGetVm(Long supplierId, String supplierName, String supplierAddress, String supplierPhone, String supplierEmail, Boolean isDeleted) {
    public static SupplierGetVm from(Supplier supplier) {
        return SupplierGetVm.builder()
                .supplierId(supplier.getSupplierId())
                .supplierName(supplier.getSupplierName())
                .supplierAddress(supplier.getSupplierAddress())
                .supplierPhone(supplier.getSupplierPhone())
                .supplierEmail(supplier.getSupplierEmail())
                .isDeleted(supplier.getIsDeleted())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/SupplierPostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Supplier;
import lombok.Builder;

@Builder
public record SupplierPostVm(String supplierName, String supplierAddress, String supplierPhone, String supplierEmail) {
    public Supplier toSupplier() {
        Supplier supplier = new Supplier();
        supplier.setSupplierName(this.supplierName);
        supplier.setSupplierAddress(this.supplierAddress);
        supplier.setSupplierPhone(this.supplierPhone);
        supplier.setSupplierEmail(this.supplierEmail);
        supplier.setIsDeleted(false);
        return supplier;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/UserGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.User;
import lombok.Builder;

@Builder
public record UserGetVm(
        String id,
        String username,
        String email,
        String phone,
        String gender,
        String provider,
        Boolean accountNonExpired,
        Boolean accountNonLocked,
        Boolean credentialsNonExpired,
        String full_name,
        Boolean enabled) {

    public static UserGetVm fromEntity(User user) {
        return UserGetVm.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .phone(user.getPhone())
                .gender(user.getGender())
                .provider(user.getProvider().toString())
                .accountNonExpired(user.getAccountNonExpired())
                .accountNonLocked(user.getAccountNonLocked())
                .credentialsNonExpired(user.getCredentialsNonExpired())
                .enabled(user.getEnabled())
                .full_name(user.getFullName())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/UserPutVm.java
================
package com.radical.be_radicalcare.ViewModels;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;

public record UserPutVm(
        @Size(min = 3, max = 100, message = "Full name must be between 3 and 100 characters")
        String fullName,

        @Email(message = "Invalid email format")
        String email,

        @Size(min = 10, max = 15, message = "Phone number must be between 10 and 15 characters")
        String phone,

        @Past(message = "Date of birth must be a past date")
        LocalDate doB,

        @Size(max = 255, message = "Address must not exceed 255 characters")
        String address
) {}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/VehicleDtoGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import lombok.Builder;

import java.time.LocalDate;
import java.util.List;

@Builder
public record VehicleDtoGetVm(
        String chassisNumber,
        String vehicleName,
        LocalDate importDate,
        String version,
        String color,
        String segment,
        Boolean isDeleted,
        Boolean sold,
        Double price,
        String description,
        List<String> imageUrls
) {
    // Optional: Add conversion methods if needed
    public static VehicleDtoGetVm fromDto(com.radical.be_radicalcare.Dto.VehicleDto vehicleDto) {
        if (vehicleDto == null) {
            throw new IllegalArgumentException("VehicleDto is null and cannot be converted to VehicleDtoGetVm");
        }
        return VehicleDtoGetVm.builder()
                .chassisNumber(vehicleDto.getChassisNumber())
                .vehicleName(vehicleDto.getVehicleName())
                .importDate(vehicleDto.getImportDate())
                .version(vehicleDto.getVersion())
                .color(vehicleDto.getColor())
                .segment(vehicleDto.getSegment())
                .isDeleted(vehicleDto.getIsDeleted())
                .sold(vehicleDto.getSold())
                .price(vehicleDto.getPrice())
                .description(vehicleDto.getDescription())
                .imageUrls(vehicleDto.getImageUrls())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/VehicleGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Vehicle;
import com.radical.be_radicalcare.Entities.VehicleImage;
import com.radical.be_radicalcare.Entities.WarrantyHistory;
import lombok.Builder;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

@Builder
public record VehicleGetVm(
        String chassisNumber,
        String vehicleName,
        LocalDate importDate,
        String version,
        String color,
        String segment,
        Boolean isDeleted,
        Boolean sold,
        Long costId,
        Long categoryId,
        Long supplierId,
        String description,
        List<String> warrantyHistory,
        List<String> imageUrls
) {
    public static VehicleGetVm fromEntity(Vehicle vehicle) {
        return VehicleGetVm.builder()
                .chassisNumber(vehicle.getChassisNumber())
                .vehicleName(vehicle.getVehicleName())
                .importDate(vehicle.getImportDate())
                .version(vehicle.getVersion())
                .color(vehicle.getColor())
                .segment(vehicle.getSegment())
                .description(vehicle.getDescription())
                .isDeleted(vehicle.getIsDeleted())
                .sold(vehicle.getSold())
                .costId(vehicle.getCostId() != null ? vehicle.getCostId().getCostId() : null)
                .categoryId(vehicle.getCategoryId() != null ? vehicle.getCategoryId().getId() : null)
                .supplierId(vehicle.getSupplierId() != null ? vehicle.getSupplierId().getSupplierId() : null)
                .warrantyHistory(vehicle.getWarrantyHistory() != null
                        ? vehicle.getWarrantyHistory().stream().map(WarrantyHistory::toString).collect(Collectors.toList())
                        : null)
                .imageUrls(vehicle.getImageUrls())
                .build();
    }

}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/VehiclePostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.Category;
import com.radical.be_radicalcare.Entities.CostTable;
import com.radical.be_radicalcare.Entities.Supplier;
import com.radical.be_radicalcare.Entities.Vehicle;
import lombok.Builder;

import java.time.LocalDate;

@Builder
public record VehiclePostVm(
        String chassisNumber,
        String vehicleName,
        LocalDate importDate,
        String version,
        String color,
        String segment,
        String description,
        Long costId,
        Long categoryId,
        Long supplierId,
        Boolean isDeleted,
        Boolean sold) {

    public Vehicle toEntity() {
        Vehicle vehicle = new Vehicle();
        vehicle.setChassisNumber(this.chassisNumber);
        vehicle.setVehicleName(this.vehicleName);
        vehicle.setImportDate(this.importDate);
        vehicle.setVersion(this.version);
        vehicle.setColor(this.color);
        vehicle.setSegment(this.segment);
        vehicle.setDescription(this.description);
        vehicle.setIsDeleted(this.isDeleted);
        vehicle.setSold(this.sold);

        if (this.costId != null) {
            CostTable costTable = new CostTable();
            costTable.setCostId(this.costId);
            vehicle.setCostId(costTable);
        }
        if (this.categoryId != null) {
            Category category = new Category();
            category.setId(this.categoryId);
            vehicle.setCategoryId(category);
        }
        if (this.supplierId != null) {
            Supplier supplier = new Supplier();
            supplier.setSupplierId(this.supplierId);
            vehicle.setSupplierId(supplier);
        }

        return vehicle;
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/WarrantyInfoGetVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.WarrantyInfo;
import lombok.Builder;

@Builder
public record WarrantyInfoGetVm(Long id, String warrantyType, String warrantyDescription) {
    public static WarrantyInfoGetVm from(WarrantyInfo warrantyInfo) {
        return WarrantyInfoGetVm.builder()
                .id(warrantyInfo.getId())
                .warrantyType(warrantyInfo.getWarrantyType())
                .warrantyDescription(warrantyInfo.getWarrantyDescription())
                .build();
    }
}

================
File: src/main/java/com/radical/be_radicalcare/ViewModels/WarrantyInfoPostVm.java
================
package com.radical.be_radicalcare.ViewModels;

import com.radical.be_radicalcare.Entities.WarrantyInfo;
import lombok.Builder;

@Builder
public record WarrantyInfoPostVm(String warrantyType, String warrantyDescription) {
    public WarrantyInfo toWarrantyInfo() {
        WarrantyInfo warrantyInfo = new WarrantyInfo();
        warrantyInfo.setWarrantyType(this.warrantyType);
        warrantyInfo.setWarrantyDescription(this.warrantyDescription);
        return warrantyInfo;
    }
}

================
File: src/main/resources/application.properties
================
spring.application.name=Be_RadicalCare

# Database connection properties
spring.datasource.url=jdbc:mysql://localhost:3306/radical_care_db
spring.datasource.username=root
spring.datasource.password=Tnhminh33!

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update

# Rest API base path
spring.data.rest.basePath=/api/v1

# Multipart file upload settings
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# UTF-8 Encoding
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# Redis configuration
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.timeout=2000

# JWT configuration
jwt.secret=Pz7q6MB4SDpywNW64dlz2n43MaCRpcj7YftUHAE_MQQ

# Hibernate logging
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Connection pool optimization
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

spring.mail.default-encoding=UTF-8
spring.mail.protocol=smtp

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

================
File: src/main/resources/db/migration/V1__Remove_phone_number_from_customer.sql
================
ALTER TABLE customer DROP COLUMN phone_number;

================
File: src/main/resources/db/migration/V2__Add_description_to_vehicle.sql
================
ALTER TABLE vehicle
    ADD COLUMN description VARCHAR(255);

================
File: src/main/resources/templates/shown_reset_password.html
================
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Đặt lại mật khẩu</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f7f7f7;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 500px;
      margin: 50px auto;
      background-color: #ffffff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .btn-primary {
      background-color: #EF5B25;
      border-color: #EF5B25;
    }
    .btn-primary:hover {
      background-color: #d44f21;
      border-color: #d44f21;
    }
    .form-control:focus {
      border-color: #EF5B25;
      box-shadow: 0 0 0 0.2rem rgba(239, 91, 37, 0.25);
    }
  </style>
</head>
<body>
<div class="container">
  <input type="hidden" id="token" value="">

  <h2 class="text-center mb-4">Đặt lại mật khẩu</h2>
  <form id="resetPasswordForm">
    <!-- Trường ẩn để lưu token -->
    <div class="mb-3">
      <label for="newPassword" class="form-label">Mật khẩu mới</label>
      <input type="password" class="form-control" id="newPassword" placeholder="Nhập mật khẩu mới" required>
    </div>
    <div class="mb-3">
      <label for="confirmPassword" class="form-label">Xác nhận mật khẩu</label>
      <input type="password" class="form-control" id="confirmPassword" placeholder="Xác nhận mật khẩu mới" required>
    </div>
    <div id="errorMessage" class="text-danger mb-3" style="display: none;">Mật khẩu không khớp!</div>
    <div id="successMessage" class="text-success mb-3" style="display: none;">Đặt lại mật khẩu thành công!</div>
    <button type="submit" class="btn btn-primary w-100">Đặt lại mật khẩu</button>
  </form>
</div>
<script>
  // Lấy token từ URL và gán vào input hidden
  document.addEventListener('DOMContentLoaded', function () {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token'); // Lấy token từ URL
    console.log('Token từ URL:', token);

    if (token) {
      document.getElementById('token').value = token; // Gán token vào input hidden
    } else {
      console.error('Token không tồn tại trong URL');
    }
  });

  document.getElementById('resetPasswordForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const token = document.getElementById('token').value;
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;

    // Log dữ liệu token và mật khẩu
    console.log('Token:', token);
    console.log('New Password:', newPassword);
    console.log('Confirm Password:', confirmPassword);

    // Kiểm tra mật khẩu khớp
    if (newPassword !== confirmPassword) {
      console.log('Mật khẩu không khớp!');
      document.getElementById('errorMessage').style.display = 'block';
      return;
    }

    document.getElementById('errorMessage').style.display = 'none';

    try {
      console.log('Bắt đầu gửi request tới API...');
      const response = await fetch('/api/v1/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          token: token,
          newPassword: newPassword
        }),
      });

      console.log('Phản hồi từ API:', response);

      if (response.ok) {
        console.log('Đặt lại mật khẩu thành công!');
        alert('Đặt lại mật khẩu thành công!');
      } else {
        const errorMessage = await response.text();
        console.error('Lỗi từ API:', errorMessage);
        alert('Lỗi: ' + errorMessage);
      }
    } catch (error) {
      console.error('Lỗi khi gửi request:', error);
      alert('Không thể kết nối tới máy chủ. Vui lòng thử lại sau.');
    }
  });
</script>
</body>
</html>

================
File: src/test/java/com/radical/be_radicalcare/BeRadicalCareApplicationTests.java
================
package com.radical.be_radicalcare;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class BeRadicalCareApplicationTests {

    @Test
    void contextLoads() {
    }

}
